<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>dududoo.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>Since Jan 2020...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>30. Circle of Numbers</title>
	  <link>//30-circleOfNumbers</link>
	  <author></author>
	  <pubDate>2020-02-01T12:00:00+09:00</pubDate>
	  <guid>//30-circleOfNumbers</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Consider integer numbers from <code class="highlighter-rouge">0</code> to <code class="highlighter-rouge">n - 1</code> written down along the circle in such a way that the distance between any two neighboring numbers is equal (note that <code class="highlighter-rouge">0</code> and <code class="highlighter-rouge">n - 1</code> are neighboring, too).</p>

<p>Given <code class="highlighter-rouge">n</code> and <code class="highlighter-rouge">firstNumber</code>, find the number which is written in the radially opposite position to <code class="highlighter-rouge">firstNumber</code>.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">n = 10</code> and <code class="highlighter-rouge">firstNumber = 2</code>, the output should be <br />
<code class="highlighter-rouge">circleOfNumbers(n, firstNumber) = 7</code>.
<img src="./img/circleOfNumbers.png" alt="circleOfNumbers" /></p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] integer n <br />
A positive even integer. <br />
Guaranteed constraints: <code class="highlighter-rouge">4 ≤ n ≤ 20</code>.</p>
  </li>
  <li>
    <p>[input] integer firstNumber <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ firstNumber ≤ n - 1</code>.</p>
  </li>
  <li>
    <p>[output] integer</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def circleOfNumbers(n, firstNumber):
    return (firstNumber + n / 2) % n
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>29. chessBoardCellColor</title>
	  <link>//29-chessBoardCellColor</link>
	  <author></author>
	  <pubDate>2020-02-01T11:00:00+09:00</pubDate>
	  <guid>//29-chessBoardCellColor</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given two cells on the standard chess board, determine whether they have the same color or not.</p>

<h3 id="example">Example</h3>

<ul>
  <li>For <code class="highlighter-rouge">cell1 = "A1"</code> and <code class="highlighter-rouge">cell2 = "C3"</code>, the output should be <br />
<code class="highlighter-rouge">chessBoardCellColor(cell1, cell2) = true</code>.
<img src="./img/chess1.png" alt="chess1" /></li>
  <li>For <code class="highlighter-rouge">cell1 = "A1"</code> and <code class="highlighter-rouge">cell2 = "H3"</code>, the output should be <br />
<code class="highlighter-rouge">chessBoardCellColor(cell1, cell2) = false</code>.
<img src="./img/chess2.png" alt="chess2" /></li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string cell1 <br />
Guaranteed constraints: <code class="highlighter-rouge">cell1.length = 2</code>, <code class="highlighter-rouge">'A' ≤ cell1[0] ≤ 'H'</code>, <code class="highlighter-rouge">1 ≤ cell1[1] ≤ 8</code>.</p>
  </li>
  <li>
    <p>[input] string cell2 <br />
Guaranteed constraints: <code class="highlighter-rouge">cell2.length = 2</code>, <code class="highlighter-rouge">'A' ≤ cell2[0] ≤ 'H'</code>, <code class="highlighter-rouge">1 ≤ cell2[1] ≤ 8</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
<code class="highlighter-rouge">true</code> if both cells have the same color, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def chessBoardCellColor(cell1, cell2):
    return (ord(cell1[0]) + int(cell1[1]) + ord(cell2[0]) + int(cell2[1])) % 2 == 0
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>28. alphabeticShift</title>
	  <link>//28-alphabeticShift</link>
	  <author></author>
	  <pubDate>2020-02-01T10:00:00+09:00</pubDate>
	  <guid>//28-alphabeticShift</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a string, your task is to replace each of its characters by the next one in the English alphabet; i.e. replace <code class="highlighter-rouge">a</code> with <code class="highlighter-rouge">b</code>, replace <code class="highlighter-rouge">b</code> with <code class="highlighter-rouge">c</code>, etc (<code class="highlighter-rouge">z</code> would be replaced by <code class="highlighter-rouge">a</code>).</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputString = "crazy"</code>, the output should be <code class="highlighter-rouge">alphabeticShift(inputString) = "dsbaz"</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string inputString <br />
A non-empty string consisting of lowercase English characters. <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ inputString.length ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[output] string <br />
The resulting string after replacing each of its characters.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def alphabeticShift(inputString):
    shift = ''
    for letter in inputString:
        if letter == 'z':
            shift += 'a'
        else:
            shift += chr(ord(letter) + 1)
    return shift
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>27. variableName</title>
	  <link>//27-variableName</link>
	  <author></author>
	  <pubDate>2020-01-30T14:00:00+09:00</pubDate>
	  <guid>//27-variableName</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Correct variable names consist only of English letters, digits and underscores and they can’t start with a digit.</p>

<p>Check if the given string is a correct variable name.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">name = "var_1__Int"</code>, the output should be <br />
<code class="highlighter-rouge">variableName(name) = true</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">name = "qq-q"</code>, the output should be <br />
<code class="highlighter-rouge">variableName(name) = false</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">name = "2w2"</code>, the output should be <br />
<code class="highlighter-rouge">variableName(name) = false</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string name <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ name.length ≤ 10</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
<code class="highlighter-rouge">true</code> if name is a correct variable name, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def variableName(name):
    if name[0].isdigit():
        return False
    valid = [*list(map(str, range(10))), *list(map(chr, [*range(65, 91), *range(97, 123)])), '_']
    return all([letter in valid for letter in name])
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>26. evenDigitsOnly</title>
	  <link>//26-evenDigitsOnly</link>
	  <author></author>
	  <pubDate>2020-01-30T13:00:00+09:00</pubDate>
	  <guid>//26-evenDigitsOnly</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Check if all digits of the given integer are even.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">n = 248622</code>, the output should be <code class="highlighter-rouge">evenDigitsOnly(n) = true</code>;</p>
  </li>
  <li>
    <p>For n = 642386, the output should be <code class="highlighter-rouge">evenDigitsOnly(n) = false</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] integer n <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ n ≤ 109</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
<code class="highlighter-rouge">true</code> if all digits of <code class="highlighter-rouge">n</code> are even, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def evenDigitsOnly(n):
    return all([int(digit) % 2 == 0 for digit in str(n)])
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>25. Array Replace</title>
	  <link>//25-arrayReplace</link>
	  <author></author>
	  <pubDate>2020-01-30T12:00:00+09:00</pubDate>
	  <guid>//25-arrayReplace</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given an array of integers, replace all the occurrences of <code class="highlighter-rouge">elemToReplace</code> with <code class="highlighter-rouge">substitutionElem</code>.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputArray = [1, 2, 1]</code>, <code class="highlighter-rouge">elemToReplace = 1</code>, and <code class="highlighter-rouge">substitutionElem = 3</code>, the output should be <br />
<code class="highlighter-rouge">arrayReplace(inputArray, elemToReplace, substitutionElem) = [3, 2, 3]</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer inputArray <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ inputArray.length ≤ 104</code>, <code class="highlighter-rouge">0 ≤ inputArray[i] ≤ 109</code>.</p>
  </li>
  <li>
    <p>[input] integer elemToReplace <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ elemToReplace ≤ 109</code>.</p>
  </li>
  <li>
    <p>[input] integer substitutionElem <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ substitutionElem ≤ 109</code>.</p>
  </li>
  <li>
    <p>[output] array.integer</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def arrayReplace(inputArray, elemToReplace, substitutionElem):
    return [substitutionElem if i == elemToReplace else i for i in inputArray]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>24. Minesweeper</title>
	  <link>//24-minesweeper</link>
	  <author></author>
	  <pubDate>2020-01-30T11:00:00+09:00</pubDate>
	  <guid>//24-minesweeper</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>In the popular Minesweeper game you have a board with some mines and those cells that don’t contain a mine have a number in it that indicates the total number of mines in the neighboring cells. Starting off with some arrangement of mines we want to create a Minesweeper game setup.</p>

<h3 id="example">Example</h3>

<p>For</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>matrix = [[true, false, false],
          [false, true, false],
          [false, false, false]]
</code></pre></div></div>
<p>the output should be</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minesweeper(matrix) = [[1, 2, 1],
                       [2, 1, 1],
                       [1, 1, 1]]
</code></pre></div></div>
<p>Check out the image below for better understanding:
<img src="./img/minesweeper.png" alt="minesweeper" /></p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.array.boolean matrix <br />
A non-empty rectangular matrix consisting of boolean values - <code class="highlighter-rouge">true</code> if the corresponding cell contains a mine, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
  <li>
    <p>Guaranteed constraints: <code class="highlighter-rouge">2 ≤ matrix.length ≤ 100</code>, <code class="highlighter-rouge">2 ≤ matrix[0].length ≤ 100</code>.</p>
  </li>
  <li>
    <p>[output] array.array.integer <br />
Rectangular matrix of the same size as <code class="highlighter-rouge">matrix</code> each cell of which contains an integer equal to the number of mines in the neighboring cells. Two cells are called neighboring if they share at least one corner.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def minesweeper(matrix):
    matrix = [[False, *matrix[row], False] for row in range(len(matrix))]
    matrix.insert(0, [False] * len(matrix[0]))
    matrix.append([False] * len(matrix[0]))
    return [[sum([sum(matrix[row + i][col - 1:col + 2]) for i in range(-1, 2)]) - matrix[row][col]
             for col in range(1, len(matrix[0]) - 1)]
             for row in range(1, len(matrix) - 1)]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>23. Box Blur</title>
	  <link>//23-boxBlur</link>
	  <author></author>
	  <pubDate>2020-01-30T10:00:00+09:00</pubDate>
	  <guid>//23-boxBlur</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Last night you partied a little too hard. Now there’s a black and white photo of you that’s about to go viral! You can’t let this ruin your reputation, so you want to apply the box blur algorithm to the photo to hide its content.</p>

<p>The pixels in the input image are represented as integers. The algorithm distorts the input image in the following way: Every pixel <code class="highlighter-rouge">x</code> in the output image has a value equal to the average value of the pixel values from the <code class="highlighter-rouge">3 × 3</code> square that has its center at <code class="highlighter-rouge">x</code>, including <code class="highlighter-rouge">x</code> itself. All the pixels on the border of <code class="highlighter-rouge">x</code> are then removed.</p>

<p>Return the blurred image as an integer, with the fractions rounded down.</p>

<h3 id="example">Example</h3>

<p>For</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>image = [[1, 1, 1],
         [1, 7, 1],
         [1, 1, 1]]
</code></pre></div></div>
<p>the output should be <code class="highlighter-rouge">boxBlur(image) = [[1]]</code>.</p>

<p>To get the value of the middle pixel in the input <code class="highlighter-rouge">3 × 3</code> square: <code class="highlighter-rouge">(1 + 1 + 1 + 1 + 7 + 1 + 1 + 1 + 1) = 15 / 9 = 1.66666 = 1</code>. The border pixels are cropped from the final result.</p>

<p>For</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>image = [[7, 4, 0, 1],
         [5, 6, 2, 2],
         [6, 10, 7, 8],
         [1, 4, 2, 0]]
</code></pre></div></div>
<p>the output should be</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>boxBlur(image) = [[5, 4],
                  [4, 4]]
</code></pre></div></div>
<p>There are four <code class="highlighter-rouge">3 × 3</code> squares in the input image, so there should be four integers in the blurred output. To get the first value: <code class="highlighter-rouge">(7 + 4 + 0 + 5 + 6 + 2 + 6 + 10 + 7) = 47 / 9 = 5.2222 = 5</code>. The other three integers are obtained the same way, then the surrounding integers are cropped from the final result.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.array.integer image <br />
An image, stored as a rectangular matrix of non-negative integers. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ image.length ≤ 100</code>, <code class="highlighter-rouge">3 ≤ image[0].length ≤ 100</code>, <code class="highlighter-rouge">0 ≤ image[i][j] ≤ 255</code>.</p>
  </li>
  <li>
    <p>[output] array.array.integer <br />
A blurred image represented as integers, obtained through the process in the description.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def boxBlur(image):
    return [[sum(sum([image[row + j][col + i] for i in range(-1, 2)]) for j in range(-1, 2)) // 9
             for col in range(1, len(image[0]) - 1)]
             for row in range(1, len(image) - 1)]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>22. avoidObstacles</title>
	  <link>//22-avoidObstacles</link>
	  <author></author>
	  <pubDate>2020-01-29T11:00:00+09:00</pubDate>
	  <guid>//22-avoidObstacles</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>You are given an array of integers representing coordinates of obstacles situated on a straight line.</p>

<p>Assume that you are jumping from the point with coordinate 0 to the right. You are allowed only to make jumps of the same length represented by some integer.</p>

<p>Find the minimal length of the jump enough to avoid all the obstacles.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputArray = [5, 3, 6, 7, 9]</code>, the output should be <br />
<code class="highlighter-rouge">avoidObstacles(inputArray) = 4</code>.</p>

<p>Check out the image below for better understanding:
<img src="./img/obstacles.png" alt="obstacles" /></p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer inputArray <br />
Non-empty array of positive integers. <br />
Guaranteed constraints: <code class="highlighter-rouge">2 ≤ inputArray.length ≤ 1000</code>, <code class="highlighter-rouge">1 ≤ inputArray[i] ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[output] integer <br />
The desired length.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def avoidObstacles(inputArray):
    for i in range(2, max(inputArray) + 1):
        if list(map(lambda x: (x % i) == 0, inputArray)) == ([False] * len(inputArray)):
            return i
    return max(inputArray) + 1
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>21. isIPv4Address</title>
	  <link>//21-isIPv4Address</link>
	  <author></author>
	  <pubDate>2020-01-29T10:00:00+09:00</pubDate>
	  <guid>//21-isIPv4Address</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>An IP address is a numerical label assigned to each device (e.g., computer, printer) participating in a computer network that uses the Internet Protocol for communication. There are two versions of the Internet protocol, and thus two versions of addresses. One of them is the IPv4 address.</p>

<p>IPv4 address is a string with the following structure: <code class="highlighter-rouge">a.b.c.d</code>, where <code class="highlighter-rouge">a</code>, <code class="highlighter-rouge">b</code>, <code class="highlighter-rouge">c</code> and <code class="highlighter-rouge">d</code> are integers in range <code class="highlighter-rouge">[0, 255]</code>. For example, <code class="highlighter-rouge">0.0.0.0</code>, <code class="highlighter-rouge">255.255.255.255</code> or <code class="highlighter-rouge">252.0.128.32</code> are correct IPv4 addresses, and <code class="highlighter-rouge">0.0.0.256</code>, <code class="highlighter-rouge">-1.1.1.1</code>, <code class="highlighter-rouge">0.0.0.0.0</code> are incorrect.</p>

<p><code class="highlighter-rouge">a.b</code> is named network part and <code class="highlighter-rouge">c.d</code> is named host part.</p>

<p>Given a string, find out if it satisfies the IPv4 address naming rules.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "172.16.254.1"</code>, the output should be <br />
<code class="highlighter-rouge">isIPv4Address(inputString) = true</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "172.316.254.1"</code>, the output should be <br />
<code class="highlighter-rouge">isIPv4Address(inputString) = false</code>. <br />
<code class="highlighter-rouge">316</code> is not in range <code class="highlighter-rouge">[0, 255]</code>.</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = ".254.255.0"</code>, the output should be <br />
<code class="highlighter-rouge">isIPv4Address(inputString) = false</code>. <br />
There is no first number.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string inputString <br />
A string consisting of digits, full stops and lowercase English letters. <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ inputString.length ≤ 30</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
<code class="highlighter-rouge">true</code> if <code class="highlighter-rouge">inputString</code> satisfies the IPv4 address naming rules, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def isIPv4Address(inputString):
    try:
        address = list(map(int, inputString.split('.')))
        if len(address) != 4:
            return False
        for number in address:
            if (number &lt; 0) or (number &gt; 255):
                return False
        return True
    except:
        return False
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
