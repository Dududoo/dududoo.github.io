<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>dududoo.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>Since Jan 2020...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>32. absoluteValuesSumMinimization</title>
	  <link>//32-absoluteValuesSumMinimization</link>
	  <author></author>
	  <pubDate>2020-02-03T11:00:00+09:00</pubDate>
	  <guid>//32-absoluteValuesSumMinimization</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a sorted array of integers <code class="highlighter-rouge">a</code>, your task is to determine which element of a is closest to all other values of <code class="highlighter-rouge">a</code>. In other words, find the element <code class="highlighter-rouge">x</code> in <code class="highlighter-rouge">a</code>, which minimizes the following sum:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>abs(a[0] - x) + abs(a[1] - x) + ... + abs(a[a.length - 1] - x)
</code></pre></div></div>
<p>(where <code class="highlighter-rouge">abs</code> denotes the absolute value)</p>

<p>If there are several possible answers, output the smallest one.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">a = [2, 4, 7]</code>, the output should be <code class="highlighter-rouge">absoluteValuesSumMinimization(a) = 4</code>. <br />
for <code class="highlighter-rouge">x = 2</code>, the value will be <code class="highlighter-rouge">abs(2 - 2) + abs(4 - 2) + abs(7 - 2) = 7</code>. <br />
for <code class="highlighter-rouge">x = 4</code>, the value will be <code class="highlighter-rouge">abs(2 - 4) + abs(4 - 4) + abs(7 - 4) = 5</code>. <br />
for <code class="highlighter-rouge">x = 7</code>, the value will be <code class="highlighter-rouge">abs(2 - 7) + abs(4 - 7) + abs(7 - 7) = 8</code>. <br />
The lowest possible value is when <code class="highlighter-rouge">x = 4</code>, so the answer is <code class="highlighter-rouge">4</code>.</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">a = [2, 3]</code>, the output should be <code class="highlighter-rouge">absoluteValuesSumMinimization(a) = 2</code>. <br />
for <code class="highlighter-rouge">x = 2</code>, the value will be <code class="highlighter-rouge">abs(2 - 2) + abs(3 - 2) = 1</code>. <br />
for <code class="highlighter-rouge">x = 3</code>, the value will be <code class="highlighter-rouge">abs(2 - 3) + abs(3 - 3) = 1</code>. <br />
Because there is a tie, the smallest <code class="highlighter-rouge">x</code> between <code class="highlighter-rouge">x = 2</code> and <code class="highlighter-rouge">x = 3</code> is the answer.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer a <br />
A non-empty array of integers, sorted in ascending order. <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ a.length ≤ 1000</code>, <code class="highlighter-rouge">-106 ≤ a[i] ≤ 106</code>.</p>
  </li>
  <li>
    <p>[output] integer <br />
An integer representing the element from <code class="highlighter-rouge">a</code> that minimizes the sum of its absolute differences with all other elements.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def absoluteValuesSumMinimization(a):
    minDstnc = a[0] * len(a) * -1
    minElmnt = a[0]
    preSum = 0
    for i in range(len(a)):
        if a[i] * (2 * i - len(a)) - 2 * preSum &lt; minDstnc:
            minDstnc = a[i] * (2 * i - len(a)) - 2 * preSum
            minElmnt = a[i]
        preSum += a[i]
    return minElmnt
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>31. depositProfit</title>
	  <link>//31-depositProfit</link>
	  <author></author>
	  <pubDate>2020-02-03T10:00:00+09:00</pubDate>
	  <guid>//31-depositProfit</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>You have deposited a specific amount of money into your bank account. Each year your balance increases at the same growth <code class="highlighter-rouge">rate</code>. With the assumption that you don’t make any additional deposits, find out how long it would take for your balance to pass a specific <code class="highlighter-rouge">threshold</code>.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">deposit = 100</code>, <code class="highlighter-rouge">rate = 20</code>, and <code class="highlighter-rouge">threshold = 170</code>, the output should be <br />
<code class="highlighter-rouge">depositProfit(deposit, rate, threshold) = 3</code>.</p>

<p>Each year the amount of money in your account increases by <code class="highlighter-rouge">20%</code>. So throughout the years, your balance would be:</p>

<p>year 0: <code class="highlighter-rouge">100</code>;
  year 1: <code class="highlighter-rouge">120</code>;
  year 2: <code class="highlighter-rouge">144</code>;
  year 3: <code class="highlighter-rouge">172.8</code>.</p>

<p>Thus, it will take <code class="highlighter-rouge">3</code> years for your balance to pass the <code class="highlighter-rouge">threshold</code>, so the answer is <code class="highlighter-rouge">3</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] integer deposit <br />
The initial deposit, guaranteed to be a positive integer. <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ deposit ≤ 100</code>.</p>
  </li>
  <li>
    <p>[input] integer rate <br />
The rate of increase. Each year the balance increases by the <code class="highlighter-rouge">rate</code> percent of the current sum. <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ rate ≤ 100</code>.</p>
  </li>
  <li>
    <p>[input] integer threshold <br />
The target balance. <br />
Guaranteed constraints: <code class="highlighter-rouge">deposit &lt; threshold ≤ 200</code>.</p>
  </li>
  <li>
    <p>[output] integer <br />
The number of years it would take to hit the <code class="highlighter-rouge">threshold</code>.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def depositProfit(deposit, rate, threshold):
    year = 0
    while deposit &lt; threshold:
        deposit *= (1 + rate / 100)
        year += 1
    return year
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>30. Circle of Numbers</title>
	  <link>//30-circleOfNumbers</link>
	  <author></author>
	  <pubDate>2020-02-01T12:00:00+09:00</pubDate>
	  <guid>//30-circleOfNumbers</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Consider integer numbers from <code class="highlighter-rouge">0</code> to <code class="highlighter-rouge">n - 1</code> written down along the circle in such a way that the distance between any two neighboring numbers is equal (note that <code class="highlighter-rouge">0</code> and <code class="highlighter-rouge">n - 1</code> are neighboring, too).</p>

<p>Given <code class="highlighter-rouge">n</code> and <code class="highlighter-rouge">firstNumber</code>, find the number which is written in the radially opposite position to <code class="highlighter-rouge">firstNumber</code>.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">n = 10</code> and <code class="highlighter-rouge">firstNumber = 2</code>, the output should be <br />
<code class="highlighter-rouge">circleOfNumbers(n, firstNumber) = 7</code>.
<img src="./img/circleOfNumbers.png" alt="circleOfNumbers" /></p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] integer n <br />
A positive even integer. <br />
Guaranteed constraints: <code class="highlighter-rouge">4 ≤ n ≤ 20</code>.</p>
  </li>
  <li>
    <p>[input] integer firstNumber <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ firstNumber ≤ n - 1</code>.</p>
  </li>
  <li>
    <p>[output] integer</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def circleOfNumbers(n, firstNumber):
    return (firstNumber + n / 2) % n
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>29. chessBoardCellColor</title>
	  <link>//29-chessBoardCellColor</link>
	  <author></author>
	  <pubDate>2020-02-01T11:00:00+09:00</pubDate>
	  <guid>//29-chessBoardCellColor</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given two cells on the standard chess board, determine whether they have the same color or not.</p>

<h3 id="example">Example</h3>

<ul>
  <li>For <code class="highlighter-rouge">cell1 = "A1"</code> and <code class="highlighter-rouge">cell2 = "C3"</code>, the output should be <br />
<code class="highlighter-rouge">chessBoardCellColor(cell1, cell2) = true</code>.
<img src="./img/chess1.png" alt="chess1" /></li>
  <li>For <code class="highlighter-rouge">cell1 = "A1"</code> and <code class="highlighter-rouge">cell2 = "H3"</code>, the output should be <br />
<code class="highlighter-rouge">chessBoardCellColor(cell1, cell2) = false</code>.
<img src="./img/chess2.png" alt="chess2" /></li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string cell1 <br />
Guaranteed constraints: <code class="highlighter-rouge">cell1.length = 2</code>, <code class="highlighter-rouge">'A' ≤ cell1[0] ≤ 'H'</code>, <code class="highlighter-rouge">1 ≤ cell1[1] ≤ 8</code>.</p>
  </li>
  <li>
    <p>[input] string cell2 <br />
Guaranteed constraints: <code class="highlighter-rouge">cell2.length = 2</code>, <code class="highlighter-rouge">'A' ≤ cell2[0] ≤ 'H'</code>, <code class="highlighter-rouge">1 ≤ cell2[1] ≤ 8</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
<code class="highlighter-rouge">true</code> if both cells have the same color, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def chessBoardCellColor(cell1, cell2):
    return (ord(cell1[0]) + int(cell1[1]) + ord(cell2[0]) + int(cell2[1])) % 2 == 0
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>28. alphabeticShift</title>
	  <link>//28-alphabeticShift</link>
	  <author></author>
	  <pubDate>2020-02-01T10:00:00+09:00</pubDate>
	  <guid>//28-alphabeticShift</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a string, your task is to replace each of its characters by the next one in the English alphabet; i.e. replace <code class="highlighter-rouge">a</code> with <code class="highlighter-rouge">b</code>, replace <code class="highlighter-rouge">b</code> with <code class="highlighter-rouge">c</code>, etc (<code class="highlighter-rouge">z</code> would be replaced by <code class="highlighter-rouge">a</code>).</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputString = "crazy"</code>, the output should be <code class="highlighter-rouge">alphabeticShift(inputString) = "dsbaz"</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string inputString <br />
A non-empty string consisting of lowercase English characters. <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ inputString.length ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[output] string <br />
The resulting string after replacing each of its characters.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def alphabeticShift(inputString):
    shift = ''
    for letter in inputString:
        if letter == 'z':
            shift += 'a'
        else:
            shift += chr(ord(letter) + 1)
    return shift
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>27. variableName</title>
	  <link>//27-variableName</link>
	  <author></author>
	  <pubDate>2020-01-30T14:00:00+09:00</pubDate>
	  <guid>//27-variableName</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Correct variable names consist only of English letters, digits and underscores and they can’t start with a digit.</p>

<p>Check if the given string is a correct variable name.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">name = "var_1__Int"</code>, the output should be <br />
<code class="highlighter-rouge">variableName(name) = true</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">name = "qq-q"</code>, the output should be <br />
<code class="highlighter-rouge">variableName(name) = false</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">name = "2w2"</code>, the output should be <br />
<code class="highlighter-rouge">variableName(name) = false</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string name <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ name.length ≤ 10</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
<code class="highlighter-rouge">true</code> if name is a correct variable name, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def variableName(name):
    if name[0].isdigit():
        return False
    valid = [*list(map(str, range(10))), *list(map(chr, [*range(65, 91), *range(97, 123)])), '_']
    return all([letter in valid for letter in name])
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>26. evenDigitsOnly</title>
	  <link>//26-evenDigitsOnly</link>
	  <author></author>
	  <pubDate>2020-01-30T13:00:00+09:00</pubDate>
	  <guid>//26-evenDigitsOnly</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Check if all digits of the given integer are even.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">n = 248622</code>, the output should be <code class="highlighter-rouge">evenDigitsOnly(n) = true</code>;</p>
  </li>
  <li>
    <p>For n = 642386, the output should be <code class="highlighter-rouge">evenDigitsOnly(n) = false</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] integer n <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ n ≤ 109</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
<code class="highlighter-rouge">true</code> if all digits of <code class="highlighter-rouge">n</code> are even, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def evenDigitsOnly(n):
    return all([int(digit) % 2 == 0 for digit in str(n)])
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>25. Array Replace</title>
	  <link>//25-arrayReplace</link>
	  <author></author>
	  <pubDate>2020-01-30T12:00:00+09:00</pubDate>
	  <guid>//25-arrayReplace</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given an array of integers, replace all the occurrences of <code class="highlighter-rouge">elemToReplace</code> with <code class="highlighter-rouge">substitutionElem</code>.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputArray = [1, 2, 1]</code>, <code class="highlighter-rouge">elemToReplace = 1</code>, and <code class="highlighter-rouge">substitutionElem = 3</code>, the output should be <br />
<code class="highlighter-rouge">arrayReplace(inputArray, elemToReplace, substitutionElem) = [3, 2, 3]</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer inputArray <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ inputArray.length ≤ 104</code>, <code class="highlighter-rouge">0 ≤ inputArray[i] ≤ 109</code>.</p>
  </li>
  <li>
    <p>[input] integer elemToReplace <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ elemToReplace ≤ 109</code>.</p>
  </li>
  <li>
    <p>[input] integer substitutionElem <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ substitutionElem ≤ 109</code>.</p>
  </li>
  <li>
    <p>[output] array.integer</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def arrayReplace(inputArray, elemToReplace, substitutionElem):
    return [substitutionElem if i == elemToReplace else i for i in inputArray]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>24. Minesweeper</title>
	  <link>//24-minesweeper</link>
	  <author></author>
	  <pubDate>2020-01-30T11:00:00+09:00</pubDate>
	  <guid>//24-minesweeper</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>In the popular Minesweeper game you have a board with some mines and those cells that don’t contain a mine have a number in it that indicates the total number of mines in the neighboring cells. Starting off with some arrangement of mines we want to create a Minesweeper game setup.</p>

<h3 id="example">Example</h3>

<p>For</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>matrix = [[true, false, false],
          [false, true, false],
          [false, false, false]]
</code></pre></div></div>
<p>the output should be</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minesweeper(matrix) = [[1, 2, 1],
                       [2, 1, 1],
                       [1, 1, 1]]
</code></pre></div></div>
<p>Check out the image below for better understanding:
<img src="./img/minesweeper.png" alt="minesweeper" /></p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.array.boolean matrix <br />
A non-empty rectangular matrix consisting of boolean values - <code class="highlighter-rouge">true</code> if the corresponding cell contains a mine, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
  <li>
    <p>Guaranteed constraints: <code class="highlighter-rouge">2 ≤ matrix.length ≤ 100</code>, <code class="highlighter-rouge">2 ≤ matrix[0].length ≤ 100</code>.</p>
  </li>
  <li>
    <p>[output] array.array.integer <br />
Rectangular matrix of the same size as <code class="highlighter-rouge">matrix</code> each cell of which contains an integer equal to the number of mines in the neighboring cells. Two cells are called neighboring if they share at least one corner.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def minesweeper(matrix):
    matrix = [[False, *matrix[row], False] for row in range(len(matrix))]
    matrix.insert(0, [False] * len(matrix[0]))
    matrix.append([False] * len(matrix[0]))
    return [[sum([sum(matrix[row + i][col - 1:col + 2]) for i in range(-1, 2)]) - matrix[row][col]
             for col in range(1, len(matrix[0]) - 1)]
             for row in range(1, len(matrix) - 1)]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>23. Box Blur</title>
	  <link>//23-boxBlur</link>
	  <author></author>
	  <pubDate>2020-01-30T10:00:00+09:00</pubDate>
	  <guid>//23-boxBlur</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Last night you partied a little too hard. Now there’s a black and white photo of you that’s about to go viral! You can’t let this ruin your reputation, so you want to apply the box blur algorithm to the photo to hide its content.</p>

<p>The pixels in the input image are represented as integers. The algorithm distorts the input image in the following way: Every pixel <code class="highlighter-rouge">x</code> in the output image has a value equal to the average value of the pixel values from the <code class="highlighter-rouge">3 × 3</code> square that has its center at <code class="highlighter-rouge">x</code>, including <code class="highlighter-rouge">x</code> itself. All the pixels on the border of <code class="highlighter-rouge">x</code> are then removed.</p>

<p>Return the blurred image as an integer, with the fractions rounded down.</p>

<h3 id="example">Example</h3>

<p>For</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>image = [[1, 1, 1],
         [1, 7, 1],
         [1, 1, 1]]
</code></pre></div></div>
<p>the output should be <code class="highlighter-rouge">boxBlur(image) = [[1]]</code>.</p>

<p>To get the value of the middle pixel in the input <code class="highlighter-rouge">3 × 3</code> square: <code class="highlighter-rouge">(1 + 1 + 1 + 1 + 7 + 1 + 1 + 1 + 1) = 15 / 9 = 1.66666 = 1</code>. The border pixels are cropped from the final result.</p>

<p>For</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>image = [[7, 4, 0, 1],
         [5, 6, 2, 2],
         [6, 10, 7, 8],
         [1, 4, 2, 0]]
</code></pre></div></div>
<p>the output should be</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>boxBlur(image) = [[5, 4],
                  [4, 4]]
</code></pre></div></div>
<p>There are four <code class="highlighter-rouge">3 × 3</code> squares in the input image, so there should be four integers in the blurred output. To get the first value: <code class="highlighter-rouge">(7 + 4 + 0 + 5 + 6 + 2 + 6 + 10 + 7) = 47 / 9 = 5.2222 = 5</code>. The other three integers are obtained the same way, then the surrounding integers are cropped from the final result.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.array.integer image <br />
An image, stored as a rectangular matrix of non-negative integers. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ image.length ≤ 100</code>, <code class="highlighter-rouge">3 ≤ image[0].length ≤ 100</code>, <code class="highlighter-rouge">0 ≤ image[i][j] ≤ 255</code>.</p>
  </li>
  <li>
    <p>[output] array.array.integer <br />
A blurred image represented as integers, obtained through the process in the description.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def boxBlur(image):
    return [[sum(sum([image[row + j][col + i] for i in range(-1, 2)]) for j in range(-1, 2)) // 9
             for col in range(1, len(image[0]) - 1)]
             for row in range(1, len(image) - 1)]
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
