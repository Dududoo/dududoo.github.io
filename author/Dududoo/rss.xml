<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>dududoo.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>Since Jan 2020...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>56. digitsProduct</title>
	  <link>//56-digitsProduct</link>
	  <author></author>
	  <pubDate>2020-02-13T15:00:00+09:00</pubDate>
	  <guid>//56-digitsProduct</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given an integer <code class="highlighter-rouge">product</code>, find the smallest positive (i.e. greater than <code class="highlighter-rouge">0</code>) integer the product of whose digits is equal to <code class="highlighter-rouge">product</code>. If there is no such integer, return <code class="highlighter-rouge">-1</code> instead.</p>

<h3 id="example">Example</h3>

<ul>
  <li>For <code class="highlighter-rouge">product = 12</code>, the output should be <br />
<code class="highlighter-rouge">digitsProduct(product) = 26</code>;</li>
  <li>For <code class="highlighter-rouge">product = 19</code>, the output should be <br />
<code class="highlighter-rouge">digitsProduct(product) = -1</code>.</li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] integer product</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ product ≤ 600</code>.</p>
  </li>
  <li>
    <p><strong>[output] integer</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def digitsProduct(product):
    if product == 0:
        return 10
    divisor = []
    while product &gt; 9:
        for i in reversed(range(2, 10)):
            if product % i == 0:
                divisor.append(i)
                product = product / i
                break
            if i == 2:
                return -1
    divisor.append(int(product))
    return int(''.join(map(str, divisor[::-1])))
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>55. Different Squares</title>
	  <link>//55-differentSquares</link>
	  <author></author>
	  <pubDate>2020-02-13T14:00:00+09:00</pubDate>
	  <guid>//55-differentSquares</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a rectangular matrix containing only digits, calculate the number of different <code class="highlighter-rouge">2 × 2</code> squares in it.</p>

<h3 id="example">Example</h3>

<p>For</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>matrix = [[1, 2, 1],
          [2, 2, 2],
          [2, 2, 2],
          [1, 2, 3],
          [2, 2, 1]]
</code></pre></div></div>
<p>the output should be <br />
<code class="highlighter-rouge">differentSquares(matrix) = 6</code>.</p>

<p>Here are all 6 different <code class="highlighter-rouge">2 × 2</code> squares:</p>
<ul>
  <li>1 2 <br />
2 2</li>
  <li>2 1 <br />
2 2</li>
  <li>2 2 <br />
2 2</li>
  <li>2 2 <br />
1 2</li>
  <li>2 2 <br />
2 3</li>
  <li>2 3 <br />
2 1</li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] array.array.integer matrix</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ matrix.length ≤ 100</code>, <code class="highlighter-rouge">1 ≤ matrix[i].length ≤ 100</code>, <code class="highlighter-rouge">0 ≤ matrix[i][j] ≤ 9</code>.</p>
  </li>
  <li>
    <p><strong>[output] integer</strong> <br />
The number of different <code class="highlighter-rouge">2 × 2</code> squares in <code class="highlighter-rouge">matrix</code>.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def differentSquares(matrix):
    squares = set([((matrix[row][column], matrix[row][column + 1]),
                    (matrix[row + 1][column], matrix[row + 1][column + 1]))
                  for column in range(len(matrix[0]) - 1) for row in range(len(matrix) - 1)])
    return len(squares)
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>54. sumUpNumbers</title>
	  <link>//54-sumUpNumbers</link>
	  <author></author>
	  <pubDate>2020-02-13T13:00:00+09:00</pubDate>
	  <guid>//54-sumUpNumbers</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>CodeMaster has just returned from shopping. He scanned the check of the items he bought and gave the resulting string to Ratiorg to figure out the total number of purchased items. Since Ratiorg is a bot he is definitely going to automate it, so he needs a program that sums up all the numbers which appear in the given input.</p>

<p>Help Ratiorg by writing a function that returns the sum of numbers that appear in the given <code class="highlighter-rouge">inputString</code>.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputString = "2 apples, 12 oranges"</code>, the output should be <br />
<code class="highlighter-rouge">sumUpNumbers(inputString) = 14</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string inputString</strong> <br />
Guaranteed constraints: 0 ≤ inputString.length ≤ 10<sup>5</sup>.</p>
  </li>
  <li>
    <p><strong>[output] integer</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import re

def sumUpNumbers(inputString):
    return sum([0] + list(map(int, re.findall('[0-9]+', inputString))))
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>53. Valid Time</title>
	  <link>//53-validTime</link>
	  <author></author>
	  <pubDate>2020-02-13T12:00:00+09:00</pubDate>
	  <guid>//53-validTime</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Check if the given string is a correct time representation of the 24-hour clock.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">time = "13:58"</code>, the output should be <br />
<code class="highlighter-rouge">validTime(time) = true</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">time = "25:51"</code>, the output should be <br />
<code class="highlighter-rouge">validTime(time) = false</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">time = "02:76"</code>, the output should be <br />
<code class="highlighter-rouge">validTime(time) = false</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string time</strong> <br />
A string representing time in <code class="highlighter-rouge">HH:MM</code> format. It is guaranteed that the first two characters, as well as the last two characters, are digits.</p>
  </li>
  <li>
    <p><strong>[output] boolean</strong> <br />
<code class="highlighter-rouge">true</code> if the given representation is correct, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import re

def validTime(time):
    correct = re.match('([01][0-9]|2[0-3]):[0-5][0-9]', time)
    if correct:
        return True
    else:
        return False
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>52. longestWord</title>
	  <link>//52-longestWord</link>
	  <author></author>
	  <pubDate>2020-02-13T11:00:00+09:00</pubDate>
	  <guid>//52-longestWord</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Define a <em>word</em> as a sequence of consecutive English letters. Find the longest <em>word</em> from the given string.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">text = "Ready, steady, go!"</code>, the output should be <br />
<code class="highlighter-rouge">longestWord(text) = "steady"</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string text</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">4 ≤ text.length ≤ 50</code>.</p>
  </li>
  <li>
    <p><strong>[output] string</strong> <br />
The longest <em>word</em> from <code class="highlighter-rouge">text</code>. It’s guaranteed that there is a unique output.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import re

def longestWord(text):
    wordList = re.findall('[a-zA-Z]+', text)
    lengthList = [len(word) for word in wordList]
    ix_longest = lengthList.index(max(lengthList))
    return wordList[ix_longest]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>51. deleteDigit</title>
	  <link>//51-deleteDigit</link>
	  <author></author>
	  <pubDate>2020-02-13T10:00:00+09:00</pubDate>
	  <guid>//51-deleteDigit</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given some integer, find the maximal number you can obtain by deleting exactly one digit of the given number.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">n = 152</code>, the output should be <br />
<code class="highlighter-rouge">deleteDigit(n) = 52</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">n = 1001</code>, the output should be <br />
<code class="highlighter-rouge">deleteDigit(n) = 101</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] integer n</strong> <br />
Guaranteed constraints: 10 ≤ n ≤ 10<sup>6</sup>.</p>
  </li>
  <li>
    <p><strong>[output] integer</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def deleteDigit(n):
    str_n = str(n)
    maxNumber = 0
    for i in range(len(str_n) - 1):
        if int(str_n[:i] + str_n[i + 1:]) &gt; maxNumber:
            maxNumber = int(str_n[:i] + str_n[i + 1:])
    if int(str_n[:-1]) &gt; maxNumber:
        maxNumber = int(str_n[:-1])
    return maxNumber
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>50. chessKnight</title>
	  <link>//50-chessKnight</link>
	  <author></author>
	  <pubDate>2020-02-12T14:00:00+09:00</pubDate>
	  <guid>//50-chessKnight</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a position of a knight on the standard chessboard, find the number of different moves the knight can perform.</p>

<p>The knight can move to a square that is two squares horizontally and one square vertically, or two squares vertically and one square horizontally away from it. The complete move therefore looks like the letter L. Check out the image below to see all valid moves for a knight piece that is placed on one of the central squares.
<img src="./img/knight.jpg" alt="knight" /></p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">cell = "a1"</code>, the output should be <br />
<code class="highlighter-rouge">chessKnight(cell) = 2</code>.
<img src="./img/knight1.jpg" alt="knight1" /></p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">cell = "c2"</code>, the output should be <br />
<code class="highlighter-rouge">chessKnight(cell) = 6</code>.
<img src="./img/knight2.jpg" alt="knight2" /></p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string cell</strong> <br />
String consisting of 2 letters - coordinates of the knight on an 8 × 8 chessboard in chess notation. <br />
Guaranteed constraints: <code class="highlighter-rouge">cell.length = 2</code>, <code class="highlighter-rouge">'a' ≤ cell[0] ≤ 'h'</code>, <code class="highlighter-rouge">1 ≤ cell[1] ≤ 8</code>.</p>
  </li>
  <li>
    <p><strong>[output] integer</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def chessKnight(cell):
    move = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]
    arrive = [chr(ord(cell[0]) + i[0]) + str(int(cell[1]) + i[1]) for i in move]
    valid_x = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
    valid_y = [str(i) for i in range(1, 9)]
    count = 0
    for position in arrive:
        if (position[0] in valid_x) and (position[1:] in valid_y):
            count += 1
    return count
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>49. lineEncoding</title>
	  <link>//49-lineEncoding</link>
	  <author></author>
	  <pubDate>2020-02-12T13:00:00+09:00</pubDate>
	  <guid>//49-lineEncoding</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a string, return its encoding defined as follows:</p>

<ul>
  <li>First, the string is divided into the least possible number of disjoint substrings consisting of identical characters
    <ul>
      <li>for example, <code class="highlighter-rouge">"aabbbc"</code> is divided into <code class="highlighter-rouge">["aa", "bbb", "c"]</code></li>
    </ul>
  </li>
  <li>Next, each substring with length greater than one is replaced with a concatenation of its length and the repeating character
    <ul>
      <li>for example, substring <code class="highlighter-rouge">"bbb"</code> is replaced by <code class="highlighter-rouge">"3b"</code></li>
    </ul>
  </li>
  <li>Finally, all the new strings are concatenated together in the same order and a new string is returned.</li>
</ul>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">s = "aabbbc"</code>, the output should be <br />
<code class="highlighter-rouge">lineEncoding(s) = "2a3bc"</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string s</strong> <br />
String consisting of lowercase English letters.
Guaranteed constraints: <code class="highlighter-rouge">4 ≤ s.length ≤ 15</code>.</p>
  </li>
  <li>
    <p><strong>[output] string</strong> <br />
Encoded version of <code class="highlighter-rouge">s</code>.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def lineEncoding(s):
    s = s + '_'
    encoded = ''
    count = 1
    for i in range(len(s) - 1):
        if s[i] == s[i + 1]:
            count += 1
        else:
            if count == 1:
                encoded += s[i]
            else:
                encoded += str(count) + s[i]
            count = 1
    return encoded
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>48. isDigit</title>
	  <link>//48-isDigit</link>
	  <author></author>
	  <pubDate>2020-02-12T12:00:00+09:00</pubDate>
	  <guid>//48-isDigit</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Determine if the given character is a digit or not.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">symbol = '0'</code>, the output should be <br />
<code class="highlighter-rouge">isDigit(symbol) = true</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">symbol = '-'</code>, the output should be <br />
<code class="highlighter-rouge">isDigit(symbol) = false</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] char symbol</strong> <br />
A character which is either a digit or not.</p>
  </li>
  <li>
    <p><strong>[output] boolean</strong> <br />
<code class="highlighter-rouge">true</code> if <code class="highlighter-rouge">symbol</code> is a digit, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def isDigit(symbol):
    return symbol.isdigit()
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>47. Is MAC48 Address?</title>
	  <link>//47-isMAC48Address</link>
	  <author></author>
	  <pubDate>2020-02-12T11:00:00+09:00</pubDate>
	  <guid>//47-isMAC48Address</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>A media access control address (MAC address) is a unique identifier assigned to network interfaces for communications on the physical network segment.</p>

<p>The standard (IEEE 802) format for printing MAC-48 addresses in human-friendly form is six groups of two hexadecimal digits (0 to 9 or A to F), separated by hyphens (e.g. <code class="highlighter-rouge">01-23-45-67-89-AB</code>).</p>

<p>Your task is to check by given string <code class="highlighter-rouge">inputString</code> whether it corresponds to MAC-48 address or not.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "00-1B-63-84-45-E6"</code>, the output should be <br />
<code class="highlighter-rouge">isMAC48Address(inputString) = true</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "Z1-1B-63-84-45-E6"</code>, the output should be <br />
<code class="highlighter-rouge">isMAC48Address(inputString) = false</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "not a MAC-48 address"</code>, the output should be <br />
<code class="highlighter-rouge">isMAC48Address(inputString) = false</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string inputString</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">15 ≤ inputString.length ≤ 20</code>.</p>
  </li>
  <li>
    <p><strong>[output] boolean</strong> <br />
<code class="highlighter-rouge">true</code> if <code class="highlighter-rouge">inputString</code> corresponds to MAC-48 address naming rules, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def isMAC48Address(inputString):
    inputS = inputString.split('-')
    valid = [str(i) for i in range(10)] + ['A', 'B', 'C', 'D', 'E', 'F']
    if len(inputS) == 6:
        for element in inputS:
            if len(element) == 2 and (element[0] in valid) and (element[1] in valid):
                continue
            else:
                return False
        return True
    return False
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
