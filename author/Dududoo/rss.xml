<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>dududoo.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>Since Jan 2020...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>22. avoidObstacles</title>
	  <link>//22-avoidObstacles</link>
	  <author></author>
	  <pubDate>2020-01-29T11:00:00+09:00</pubDate>
	  <guid>//22-avoidObstacles</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>You are given an array of integers representing coordinates of obstacles situated on a straight line.</p>

<p>Assume that you are jumping from the point with coordinate 0 to the right. You are allowed only to make jumps of the same length represented by some integer.</p>

<p>Find the minimal length of the jump enough to avoid all the obstacles.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputArray = [5, 3, 6, 7, 9]</code>, the output should be <br />
<code class="highlighter-rouge">avoidObstacles(inputArray) = 4</code>.</p>

<p>Check out the image below for better understanding:
<img src="./img/obstacles.png" alt="obstacles" /></p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer inputArray <br />
Non-empty array of positive integers. <br />
Guaranteed constraints: <code class="highlighter-rouge">2 ≤ inputArray.length ≤ 1000</code>, <code class="highlighter-rouge">1 ≤ inputArray[i] ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[output] integer <br />
The desired length.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def avoidObstacles(inputArray):
    for i in range(2, max(inputArray) + 1):
        if list(map(lambda x: (x % i) == 0, inputArray)) == ([False] * len(inputArray)):
            return i
    return max(inputArray) + 1
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>21. isIPv4Address</title>
	  <link>//21-isIPv4Address</link>
	  <author></author>
	  <pubDate>2020-01-29T10:00:00+09:00</pubDate>
	  <guid>//21-isIPv4Address</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>An IP address is a numerical label assigned to each device (e.g., computer, printer) participating in a computer network that uses the Internet Protocol for communication. There are two versions of the Internet protocol, and thus two versions of addresses. One of them is the IPv4 address.</p>

<p>IPv4 address is a string with the following structure: <code class="highlighter-rouge">a.b.c.d</code>, where <code class="highlighter-rouge">a</code>, <code class="highlighter-rouge">b</code>, <code class="highlighter-rouge">c</code> and <code class="highlighter-rouge">d</code> are integers in range <code class="highlighter-rouge">[0, 255]</code>. For example, <code class="highlighter-rouge">0.0.0.0</code>, <code class="highlighter-rouge">255.255.255.255</code> or <code class="highlighter-rouge">252.0.128.32</code> are correct IPv4 addresses, and <code class="highlighter-rouge">0.0.0.256</code>, <code class="highlighter-rouge">-1.1.1.1</code>, <code class="highlighter-rouge">0.0.0.0.0</code> are incorrect.</p>

<p><code class="highlighter-rouge">a.b</code> is named network part and <code class="highlighter-rouge">c.d</code> is named host part.</p>

<p>Given a string, find out if it satisfies the IPv4 address naming rules.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "172.16.254.1"</code>, the output should be <br />
<code class="highlighter-rouge">isIPv4Address(inputString) = true</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "172.316.254.1"</code>, the output should be <br />
<code class="highlighter-rouge">isIPv4Address(inputString) = false</code>. <br />
<code class="highlighter-rouge">316</code> is not in range <code class="highlighter-rouge">[0, 255]</code>.</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = ".254.255.0"</code>, the output should be <br />
<code class="highlighter-rouge">isIPv4Address(inputString) = false</code>. <br />
There is no first number.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string inputString <br />
A string consisting of digits, full stops and lowercase English letters. <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ inputString.length ≤ 30</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
<code class="highlighter-rouge">true</code> if <code class="highlighter-rouge">inputString</code> satisfies the IPv4 address naming rules, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def isIPv4Address(inputString):
    try:
        address = list(map(int, inputString.split('.')))
        if len(address) != 4:
            return False
        for number in address:
            if (number &lt; 0) or (number &gt; 255):
                return False
        return True
    except:
        return False
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>20. arrayMaximalAdjacentDifference</title>
	  <link>//20-arrayMaximalAdjacentDifference</link>
	  <author></author>
	  <pubDate>2020-01-28T17:00:00+09:00</pubDate>
	  <guid>//20-arrayMaximalAdjacentDifference</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given an array of integers, find the maximal absolute difference between any two of its adjacent elements.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputArray = [2, 4, 1, 0]</code>, the output should be <br />
<code class="highlighter-rouge">arrayMaximalAdjacentDifference(inputArray) = 3</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer inputArray <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ inputArray.length ≤ 10</code>, <code class="highlighter-rouge">-15 ≤ inputArray[i] ≤ 15</code>.</p>
  </li>
  <li>
    <p>[output] integer <br />
The maximal absolute difference.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def arrayMaximalAdjacentDifference(inputArray):
    return max([abs(inputArray[i] - inputArray[i - 1]) for i in range(1, len(inputArray))])
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>19. areEquallyStrong</title>
	  <link>//19-areEquallyStrong</link>
	  <author></author>
	  <pubDate>2020-01-28T16:00:00+09:00</pubDate>
	  <guid>//19-areEquallyStrong</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Call two arms equally strong if the heaviest weights they each are able to lift are equal.</p>

<p>Call two people equally strong if their strongest arms are equally strong (the strongest arm can be both the right and the left), and so are their weakest arms.</p>

<p>Given your and your friend’s arms’ lifting capabilities find out if you two are equally strong.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">yourLeft = 10</code>, <code class="highlighter-rouge">yourRight = 15</code>, <code class="highlighter-rouge">friendsLeft = 15</code>, and <code class="highlighter-rouge">friendsRight = 10</code>, the output should be <br />
<code class="highlighter-rouge">areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight) = true</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">yourLeft = 15</code>, <code class="highlighter-rouge">yourRight = 10</code>, <code class="highlighter-rouge">friendsLeft = 15</code>, and <code class="highlighter-rouge">friendsRight = 10</code>, the output should be <br />
<code class="highlighter-rouge">areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight) = true</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">yourLeft = 15</code>, <code class="highlighter-rouge">yourRight = 10</code>, <code class="highlighter-rouge">friendsLeft = 15</code>, and <code class="highlighter-rouge">friendsRight = 9</code>, the output should be <br />
<code class="highlighter-rouge">areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight) = false</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] integer yourLeft <br />
A non-negative integer representing the heaviest weight you can lift with your left arm. <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ yourLeft ≤ 20</code>.</p>
  </li>
  <li>
    <p>[input] integer yourRight <br />
A non-negative integer representing the heaviest weight you can lift with your right arm. <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ yourRight ≤ 20</code>.</p>
  </li>
  <li>
    <p>[input] integer friendsLeft <br />
A non-negative integer representing the heaviest weight your friend can lift with his or her left arm. <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ friendsLeft ≤ 20</code>.</p>
  </li>
  <li>
    <p>[input] integer friendsRight <br />
A non-negative integer representing the heaviest weight your friend can lift with his or her right arm. <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ friendsRight ≤ 20</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
<code class="highlighter-rouge">true</code> if you and your friend are equally strong, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight):
    return sorted([yourLeft, yourRight]) == sorted([friendsLeft, friendsRight])
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>18. palindromeRearranging</title>
	  <link>//18-palindromeRearranging</link>
	  <author></author>
	  <pubDate>2020-01-28T15:00:00+09:00</pubDate>
	  <guid>//18-palindromeRearranging</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a string, find out if its characters can be rearranged to form a palindrome.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputString = "aabb"</code>, the output should be <br />
<code class="highlighter-rouge">palindromeRearranging(inputString) = true</code>.</p>

<p>We can rearrange <code class="highlighter-rouge">"aabb"</code> to make <code class="highlighter-rouge">"abba"</code>, which is a palindrome.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string inputString <br />
A string consisting of lowercase English letters. <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ inputString.length ≤ 50</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
<code class="highlighter-rouge">true</code> if the characters of the <code class="highlighter-rouge">inputString</code> can be rearranged to form a palindrome, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def palindromeRearranging(inputString):
    count = {}
    oddCount = 0
    for letter in inputString:
        if letter in count:
            count[letter] += 1
        else:
            count[letter] = 1
    for val in count.values():
        if val % 2 == 1:
            oddCount += 1
    return oddCount &lt; 2
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>17. arrayChange</title>
	  <link>//17-arrayChange</link>
	  <author></author>
	  <pubDate>2020-01-28T14:00:00+09:00</pubDate>
	  <guid>//17-arrayChange</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>You are given an array of integers. On each move you are allowed to increase exactly one of its element by one. Find the minimal number of moves required to obtain a strictly increasing sequence from the input.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputArray = [1, 1, 1]</code>, the output should be <br />
<code class="highlighter-rouge">arrayChange(inputArray) = 3</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer inputArray <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ inputArray.length ≤ 105</code>, <code class="highlighter-rouge">-105 ≤ inputArray[i] ≤ 105</code>.</p>
  </li>
  <li>
    <p>[output] integer <br />
The minimal number of moves needed to obtain a strictly increasing sequence from <code class="highlighter-rouge">inputArray</code>. <br />
It’s guaranteed that for the given test cases the answer always fits signed 32-bit integer type.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def arrayChange(inputArray):
    increase = 0
    for i in range(1, len(inputArray)):
        if inputArray[i - 1] &gt;= inputArray[i]:
            increase += inputArray[i - 1] - inputArray[i] + 1
            inputArray[i] = inputArray[i - 1] + 1
    return increase
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>16. Are Similar?</title>
	  <link>//16-areSimilar</link>
	  <author></author>
	  <pubDate>2020-01-28T13:00:00+09:00</pubDate>
	  <guid>//16-areSimilar</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Two arrays are called similar if one can be obtained from another by swapping at most one pair of elements in one of the arrays.</p>

<p>Given two arrays <code class="highlighter-rouge">a</code> and <code class="highlighter-rouge">b</code>, check whether they are similar.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">a = [1, 2, 3]</code> and <code class="highlighter-rouge">b = [1, 2, 3]</code>, the output should be <br />
<code class="highlighter-rouge">areSimilar(a, b) = true</code>. <br />
The arrays are equal, no need to swap any elements.</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">a = [1, 2, 3]</code> and <code class="highlighter-rouge">b = [2, 1, 3]</code>, the output should be <br />
<code class="highlighter-rouge">areSimilar(a, b) = true</code>. <br />
We can obtain <code class="highlighter-rouge">b</code> from <code class="highlighter-rouge">a</code> by swapping <code class="highlighter-rouge">2</code> and <code class="highlighter-rouge">1</code> in <code class="highlighter-rouge">b</code>. <br />
For <code class="highlighter-rouge">a = [1, 2, 2]</code> and <code class="highlighter-rouge">b = [2, 1, 1]</code>, the output should be <br />
<code class="highlighter-rouge">areSimilar(a, b) = false</code>. <br />
Any swap of any two elements either in <code class="highlighter-rouge">a</code> or in <code class="highlighter-rouge">b</code> won’t make <code class="highlighter-rouge">a</code> and <code class="highlighter-rouge">b</code> equal.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer a <br />
Array of integers. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ a.length ≤ 105</code>, <code class="highlighter-rouge">1 ≤ a[i] ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[input] array.integer b <br />
Array of integers of the same length as <code class="highlighter-rouge">a</code>. <br />
Guaranteed constraints: <code class="highlighter-rouge">b.length = a.length</code>, <code class="highlighter-rouge">1 ≤ b[i] ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
<code class="highlighter-rouge">true</code> if <code class="highlighter-rouge">a</code> and <code class="highlighter-rouge">b</code> are similar, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def areSimilar(a, b):
    i = 0
    fstIndx = -1
    sndIndx = -1
    while i &lt; len(a):
        if a[i] != b[i]:
            fstIndx = i
            i += 1
            break
        i += 1
    while i &lt; len(a):
        if a[i] != b[i]:
            sndIndx = i
            i += 1
            break
        i += 1
    while i &lt; len(a):
        if a[i] != b[i]:
            return False
        i += 1
    if (fstIndx &lt; 0 or sndIndx &lt; 0):
        return True
    return (a[fstIndx] == b[sndIndx] and a[sndIndx] == b[fstIndx])
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>15. Add Border</title>
	  <link>//15-addBorder</link>
	  <author></author>
	  <pubDate>2020-01-28T12:00:00+09:00</pubDate>
	  <guid>//15-addBorder</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a rectangular matrix of characters, add a border of asterisks(<code class="highlighter-rouge">*</code>) to it.</p>

<h3 id="example">Example</h3>

<p>For</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>picture = ["abc",
           "ded"]
</code></pre></div></div>
<p>the output should be</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>addBorder(picture) = ["*****",
                      "*abc*",
                      "*ded*",
                      "*****"]
</code></pre></div></div>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.string picture <br />
A non-empty array of non-empty equal-length strings. <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ picture.length ≤ 100</code>, <code class="highlighter-rouge">1 ≤ picture[i].length ≤ 100</code>.</p>
  </li>
  <li>
    <p>[output] array.string <br />
The same matrix of characters, framed with a border of asterisks of width 1.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def addBorder(picture):
    border = ['*' + element + '*' for element in picture]
    border.insert(0, '*' * (len(picture[0]) + 2))
    border.append('*' * (len(picture[0]) + 2))
    return border
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>14. alternatingSums</title>
	  <link>//14-alternatingSums</link>
	  <author></author>
	  <pubDate>2020-01-28T11:00:00+09:00</pubDate>
	  <guid>//14-alternatingSums</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Several people are standing in a row and need to be divided into two teams. The first person goes into team 1, the second goes into team 2, the third goes into team 1 again, the fourth into team 2, and so on.</p>

<p>You are given an array of positive integers - the weights of the people. Return an array of two integers, where the first element is the total weight of team 1, and the second element is the total weight of team 2 after the division is complete.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">a = [50, 60, 60, 45, 70]</code>, the output should be <br />
<code class="highlighter-rouge">alternatingSums(a) = [180, 105]</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer a <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ a.length ≤ 105</code>, <code class="highlighter-rouge">45 ≤ a[i] ≤ 100</code>.</p>
  </li>
  <li>
    <p>[output] array.integer</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def alternatingSums(a):
    return [sum(a[::2]), sum(a[1::2])]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>13. reverseInParentheses</title>
	  <link>//13-reverseInParentheses</link>
	  <author></author>
	  <pubDate>2020-01-28T10:00:00+09:00</pubDate>
	  <guid>//13-reverseInParentheses</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Write a function that reverses characters in (possibly nested) parentheses in the input string.</p>

<p>Input strings will always be well-formed with matching <code class="highlighter-rouge">()</code>s.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "(bar)"</code>, the output should be <br />
<code class="highlighter-rouge">reverseInParentheses(inputString) = "rab"</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "foo(bar)baz"</code>, the output should be <br />
<code class="highlighter-rouge">reverseInParentheses(inputString) = "foorabbaz"</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "foo(bar)baz(blim)"</code>, the output should be <br />
<code class="highlighter-rouge">reverseInParentheses(inputString) = "foorabbazmilb"</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "foo(bar(baz))blim"</code>, the output should be <br />
<code class="highlighter-rouge">reverseInParentheses(inputString) = "foobazrabblim"</code>. <br />
Because <code class="highlighter-rouge">"foo(bar(baz))blim"</code> becomes <code class="highlighter-rouge">"foo(barzab)blim"</code> and then <code class="highlighter-rouge">"foobazrabblim"</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string inputString <br />
A string consisting of lowercase English letters and the characters <code class="highlighter-rouge">(</code> and <code class="highlighter-rouge">)</code>. It is guaranteed that all parentheses in <code class="highlighter-rouge">inputString</code> form a regular bracket sequence. <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ inputString.length ≤ 50</code>.</p>
  </li>
  <li>
    <p>[output] string <br />
Return <code class="highlighter-rouge">inputString</code>, with all the characters that were in parentheses reversed.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def reverseInParentheses(inputString):
    i = 0
    rev = ''
    while i &lt; len(inputString):
        if inputString[i] == '(':
            j, revPar = reverseInParentheses(inputString[i + 1:])
            rev += revPar
            i += j + 2
        elif inputString[i] == ')':
            return i, rev[::-1]
        else:
            rev += inputString[i]
            i += 1
    return rev
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
