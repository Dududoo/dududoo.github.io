<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>dududoo.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>Since Jan 2020...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>38. growingPlant</title>
	  <link>//38-growingPlant</link>
	  <author></author>
	  <pubDate>2020-02-09T14:00:00+09:00</pubDate>
	  <guid>//38-growingPlant</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Caring for a plant can be hard work, but since you tend to it regularly, you have a plant that grows consistently. Each day, its height increases by a fixed amount represented by the integer <code class="highlighter-rouge">upSpeed</code>. But due to lack of sunlight, the plant decreases in height every night, by an amount represented by <code class="highlighter-rouge">downSpeed</code>.</p>

<p>Since you grew the plant from a seed, it started at height <code class="highlighter-rouge">0</code> initially. Given an integer <code class="highlighter-rouge">desiredHeight</code>, your task is to find how many days it’ll take for the plant to reach this height.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">upSpeed = 100</code>, <code class="highlighter-rouge">downSpeed = 10</code>, and <code class="highlighter-rouge">desiredHeight = 910</code>, the output should be <br />
<code class="highlighter-rouge">growingPlant(upSpeed, downSpeed, desiredHeight) = 10</code>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">#</th>
      <th style="text-align: center">Day</th>
      <th style="text-align: center">Night</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">100</td>
      <td style="text-align: center">90</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">190</td>
      <td style="text-align: center">180</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">280</td>
      <td style="text-align: center">270</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">370</td>
      <td style="text-align: center">360</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">460</td>
      <td style="text-align: center">450</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: center">550</td>
      <td style="text-align: center">540</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: center">640</td>
      <td style="text-align: center">630</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: center">730</td>
      <td style="text-align: center">720</td>
    </tr>
    <tr>
      <td style="text-align: center">9</td>
      <td style="text-align: center">820</td>
      <td style="text-align: center">810</td>
    </tr>
    <tr>
      <td style="text-align: center">10</td>
      <td style="text-align: center">910</td>
      <td style="text-align: center">900</td>
    </tr>
  </tbody>
</table>

<p>The plant first reaches a height of <code class="highlighter-rouge">910</code> on day <code class="highlighter-rouge">10</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] integer upSpeed <br />
A positive integer representing the daily growth of the plant. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ upSpeed ≤ 100</code>.</p>
  </li>
  <li>
    <p>[input] integer downSpeed <br />
A positive integer representing the nightly decline of the plant. <br />
Guaranteed constraints: <code class="highlighter-rouge">2 ≤ downSpeed &lt; upSpeed</code>.</p>
  </li>
  <li>
    <p>[input] integer desiredHeight <br />
A positive integer representing the goal height. <br />
Guaranteed constraints: <code class="highlighter-rouge">4 ≤ desiredHeight ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[output] integer <br />
The number of days that it will take for the plant to reach / pass <code class="highlighter-rouge">desiredHeight</code>.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import math

def growingPlant(upSpeed, downSpeed, desiredHeight):
    if desiredHeight &lt; upSpeed:
        return 1
    return math.ceil((desiredHeight - upSpeed) / (upSpeed - downSpeed) + 1)
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>37. arrayMaxConsecutiveSum</title>
	  <link>//37-arrayMaxConsecutiveSum</link>
	  <author></author>
	  <pubDate>2020-02-09T13:00:00+09:00</pubDate>
	  <guid>//37-arrayMaxConsecutiveSum</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given array of integers, find the maximal possible sum of some of its <code class="highlighter-rouge">k</code> consecutive elements.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputArray = [2, 3, 5, 1, 6]</code> and <code class="highlighter-rouge">k = 2</code>, the output should be <br />
<code class="highlighter-rouge">arrayMaxConsecutiveSum(inputArray, k) = 8</code>. <br />
All possible sums of <code class="highlighter-rouge">2</code> consecutive elements are:</p>

<ul>
  <li><code class="highlighter-rouge">2 + 3 = 5</code>;</li>
  <li><code class="highlighter-rouge">3 + 5 = 8</code>;</li>
  <li><code class="highlighter-rouge">5 + 1 = 6</code>;</li>
  <li><code class="highlighter-rouge">1 + 6 = 7</code>. <br />
Thus, the answer is <code class="highlighter-rouge">8</code>.</li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer inputArray <br />
Array of positive integers. <br /><br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ inputArray.length ≤ 105</code>, <code class="highlighter-rouge">1 ≤ inputArray[i] ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[input] integer k <br />
An integer (not greater than the length of <code class="highlighter-rouge">inputArray</code>). <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ k ≤ inputArray.length</code>.</p>
  </li>
  <li>
    <p>[output] integer <br />
The maximal possible sum.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def arrayMaxConsecutiveSum(inputArray, k):
    curSum = sum(inputArray[:k])
    maxSum = curSum
    for i in range(len(inputArray) - k):
        curSum += inputArray[k + i] - inputArray[i]
        if curSum &gt; maxSum:
            maxSum = curSum
    return maxSum
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>36. differentSymbolsNaive</title>
	  <link>//36-differentSymbolsNaive</link>
	  <author></author>
	  <pubDate>2020-02-09T12:00:00+09:00</pubDate>
	  <guid>//36-differentSymbolsNaive</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a string, find the number of different characters in it.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">s = "cabca"</code>, the output should be <br />
<code class="highlighter-rouge">differentSymbolsNaive(s) = 3</code>.</p>

<p>There are <code class="highlighter-rouge">3</code> different characters <code class="highlighter-rouge">a</code>, <code class="highlighter-rouge">b</code> and <code class="highlighter-rouge">c</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string s <br />
A string of lowercase English letters. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ s.length ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[output] integer</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def differentSymbolsNaive(s):
    existChar = []
    count = 0
    for letter in s:
        if letter not in existChar:
            existChar.append(letter)
            count += 1
    return count
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>35. firstDigit</title>
	  <link>//35-firstDigit</link>
	  <author></author>
	  <pubDate>2020-02-09T11:00:00+09:00</pubDate>
	  <guid>//35-firstDigit</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Find the leftmost digit that occurs in a given string.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "var_1__Int"</code>, the output should be <br />
<code class="highlighter-rouge">firstDigit(inputString) = '1'</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "q2q-q"</code>, the output should be <br />
<code class="highlighter-rouge">firstDigit(inputString) = '2'</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "0ss"</code>, the output should be <br />
<code class="highlighter-rouge">firstDigit(inputString) = '0'</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string inputString <br />
A string containing at least one digit. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ inputString.length ≤ 10</code>.</p>
  </li>
  <li>
    <p>[output] char</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def firstDigit(inputString):
    for letter in inputString:
        if letter.isdigit():
            return letter
    return
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>34. extracntEachKth</title>
	  <link>//34-extractEachKth</link>
	  <author></author>
	  <pubDate>2020-02-09T10:00:00+09:00</pubDate>
	  <guid>//34-extractEachKth</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given array of integers, remove each <code class="highlighter-rouge">kth</code> element from it.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code> and <code class="highlighter-rouge">k = 3</code>, the output should be <br />
<code class="highlighter-rouge">extractEachKth(inputArray, k) = [1, 2, 4, 5, 7, 8, 10]</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer inputArray <br />
Guaranteed constraints: <code class="highlighter-rouge">5 ≤ inputArray.length ≤ 15</code>, <code class="highlighter-rouge">-20 ≤ inputArray[i] ≤ 20</code>.</p>
  </li>
  <li>
    <p>[input] integer k <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ k ≤ 10</code>.</p>
  </li>
  <li>
    <p>[output] array.integer <br />
<code class="highlighter-rouge">inputArray</code> without elements <code class="highlighter-rouge">k - 1</code>, <code class="highlighter-rouge">2k - 1</code>, <code class="highlighter-rouge">3k - 1</code> etc.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def extractEachKth(inputArray, k):
    del inputArray[k - 1::k]
    return inputArray
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>33. stringsRearrangement</title>
	  <link>//33-stringsRearrangement</link>
	  <author></author>
	  <pubDate>2020-02-06T10:00:00+09:00</pubDate>
	  <guid>//33-stringsRearrangement</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given an array of equal-length strings, you’d like to know if it’s possible to rearrange the order of the elements in such a way that each consecutive pair of strings differ by exactly one character. Return <code class="highlighter-rouge">true</code> if it’s possible, and <code class="highlighter-rouge">false</code> if not.</p>

<p>Note: You’re only rearranging the order of the strings, not the order of the letters within the strings!</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For inputArray = [“aba”, “bbb”, “bab”], the output should be <br />
stringsRearrangement(inputArray) = false.</p>

    <p>There are 6 possible arrangements for these strings:</p>

    <p>[“aba”, “bbb”, “bab”]
[“aba”, “bab”, “bbb”]
[“bbb”, “aba”, “bab”]
[“bbb”, “bab”, “aba”]
[“bab”, “bbb”, “aba”]
[“bab”, “aba”, “bbb”] <br />
None of these satisfy the condition of consecutive strings differing by 1 character, so the answer is false.</p>
  </li>
  <li>
    <p>For inputArray = [“ab”, “bb”, “aa”], the output should be <br />
stringsRearrangement(inputArray) = true.</p>

    <p>It’s possible to arrange these strings in a way that each consecutive pair of strings differ by 1 character (eg: “aa”, “ab”, “bb” or “bb”, “ab”, “aa”), so return true.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.string inputArray <br />
AA non-empty array of strings of lowercase letters. <br />
Guaranteed constraints: <code class="highlighter-rouge">2 ≤ inputArray.length ≤ 10</code>, <code class="highlighter-rouge">1 ≤ inputArray[i].length ≤ 15</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
Return <code class="highlighter-rouge">true</code> if the strings can be reordered in such a way that each neighbouring pair of strings differ by exactly one character (<code class="highlighter-rouge">false</code> otherwise).</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def stringsRearrangement(inputArray):

    def checkDiffByOneChar(w1, w2):
        count = 0
        for i, c in enumerate(w1):
            if c != w2[i]:
                count += 1
            if count &gt; 1:
                return False
        return count == 1

    nodes = []
    for i, w1 in enumerate(inputArray):
        neighbors = []
        for j, w2 in enumerate(inputArray):
            if checkDiffByOneChar(w1, w2):
                neighbors.append(j)
        nodes.append(neighbors)
    path = []


    def walkPath(n, path):
        path.append(n)

        if len(path) == len(nodes):
            print("path walked. path = {}".format(path))
            return True

        for i in nodes[n]:
            if i not in path:
                if walkPath(i, path):
                    return True
        path.pop()
        return False

    for start in range(len(nodes)):
        if walkPath(start, path):
            return True

    return False
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>32. absoluteValuesSumMinimization</title>
	  <link>//32-absoluteValuesSumMinimization</link>
	  <author></author>
	  <pubDate>2020-02-03T11:00:00+09:00</pubDate>
	  <guid>//32-absoluteValuesSumMinimization</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a sorted array of integers <code class="highlighter-rouge">a</code>, your task is to determine which element of a is closest to all other values of <code class="highlighter-rouge">a</code>. In other words, find the element <code class="highlighter-rouge">x</code> in <code class="highlighter-rouge">a</code>, which minimizes the following sum:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>abs(a[0] - x) + abs(a[1] - x) + ... + abs(a[a.length - 1] - x)
</code></pre></div></div>
<p>(where <code class="highlighter-rouge">abs</code> denotes the absolute value)</p>

<p>If there are several possible answers, output the smallest one.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">a = [2, 4, 7]</code>, the output should be <code class="highlighter-rouge">absoluteValuesSumMinimization(a) = 4</code>. <br />
for <code class="highlighter-rouge">x = 2</code>, the value will be <code class="highlighter-rouge">abs(2 - 2) + abs(4 - 2) + abs(7 - 2) = 7</code>. <br />
for <code class="highlighter-rouge">x = 4</code>, the value will be <code class="highlighter-rouge">abs(2 - 4) + abs(4 - 4) + abs(7 - 4) = 5</code>. <br />
for <code class="highlighter-rouge">x = 7</code>, the value will be <code class="highlighter-rouge">abs(2 - 7) + abs(4 - 7) + abs(7 - 7) = 8</code>. <br />
The lowest possible value is when <code class="highlighter-rouge">x = 4</code>, so the answer is <code class="highlighter-rouge">4</code>.</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">a = [2, 3]</code>, the output should be <code class="highlighter-rouge">absoluteValuesSumMinimization(a) = 2</code>. <br />
for <code class="highlighter-rouge">x = 2</code>, the value will be <code class="highlighter-rouge">abs(2 - 2) + abs(3 - 2) = 1</code>. <br />
for <code class="highlighter-rouge">x = 3</code>, the value will be <code class="highlighter-rouge">abs(2 - 3) + abs(3 - 3) = 1</code>. <br />
Because there is a tie, the smallest <code class="highlighter-rouge">x</code> between <code class="highlighter-rouge">x = 2</code> and <code class="highlighter-rouge">x = 3</code> is the answer.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer a <br />
A non-empty array of integers, sorted in ascending order. <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ a.length ≤ 1000</code>, <code class="highlighter-rouge">-106 ≤ a[i] ≤ 106</code>.</p>
  </li>
  <li>
    <p>[output] integer <br />
An integer representing the element from <code class="highlighter-rouge">a</code> that minimizes the sum of its absolute differences with all other elements.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def absoluteValuesSumMinimization(a):
    minDstnc = a[0] * len(a) * -1
    minElmnt = a[0]
    preSum = 0
    for i in range(len(a)):
        if a[i] * (2 * i - len(a)) - 2 * preSum &lt; minDstnc:
            minDstnc = a[i] * (2 * i - len(a)) - 2 * preSum
            minElmnt = a[i]
        preSum += a[i]
    return minElmnt
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>31. depositProfit</title>
	  <link>//31-depositProfit</link>
	  <author></author>
	  <pubDate>2020-02-03T10:00:00+09:00</pubDate>
	  <guid>//31-depositProfit</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>You have deposited a specific amount of money into your bank account. Each year your balance increases at the same growth <code class="highlighter-rouge">rate</code>. With the assumption that you don’t make any additional deposits, find out how long it would take for your balance to pass a specific <code class="highlighter-rouge">threshold</code>.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">deposit = 100</code>, <code class="highlighter-rouge">rate = 20</code>, and <code class="highlighter-rouge">threshold = 170</code>, the output should be <br />
<code class="highlighter-rouge">depositProfit(deposit, rate, threshold) = 3</code>.</p>

<p>Each year the amount of money in your account increases by <code class="highlighter-rouge">20%</code>. So throughout the years, your balance would be:</p>

<p>year 0: <code class="highlighter-rouge">100</code>;
  year 1: <code class="highlighter-rouge">120</code>;
  year 2: <code class="highlighter-rouge">144</code>;
  year 3: <code class="highlighter-rouge">172.8</code>.</p>

<p>Thus, it will take <code class="highlighter-rouge">3</code> years for your balance to pass the <code class="highlighter-rouge">threshold</code>, so the answer is <code class="highlighter-rouge">3</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] integer deposit <br />
The initial deposit, guaranteed to be a positive integer. <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ deposit ≤ 100</code>.</p>
  </li>
  <li>
    <p>[input] integer rate <br />
The rate of increase. Each year the balance increases by the <code class="highlighter-rouge">rate</code> percent of the current sum. <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ rate ≤ 100</code>.</p>
  </li>
  <li>
    <p>[input] integer threshold <br />
The target balance. <br />
Guaranteed constraints: <code class="highlighter-rouge">deposit &lt; threshold ≤ 200</code>.</p>
  </li>
  <li>
    <p>[output] integer <br />
The number of years it would take to hit the <code class="highlighter-rouge">threshold</code>.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def depositProfit(deposit, rate, threshold):
    year = 0
    while deposit &lt; threshold:
        deposit *= (1 + rate / 100)
        year += 1
    return year
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>30. Circle of Numbers</title>
	  <link>//30-circleOfNumbers</link>
	  <author></author>
	  <pubDate>2020-02-01T12:00:00+09:00</pubDate>
	  <guid>//30-circleOfNumbers</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Consider integer numbers from <code class="highlighter-rouge">0</code> to <code class="highlighter-rouge">n - 1</code> written down along the circle in such a way that the distance between any two neighboring numbers is equal (note that <code class="highlighter-rouge">0</code> and <code class="highlighter-rouge">n - 1</code> are neighboring, too).</p>

<p>Given <code class="highlighter-rouge">n</code> and <code class="highlighter-rouge">firstNumber</code>, find the number which is written in the radially opposite position to <code class="highlighter-rouge">firstNumber</code>.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">n = 10</code> and <code class="highlighter-rouge">firstNumber = 2</code>, the output should be <br />
<code class="highlighter-rouge">circleOfNumbers(n, firstNumber) = 7</code>.
<img src="./img/circleOfNumbers.png" alt="circleOfNumbers" /></p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] integer n <br />
A positive even integer. <br />
Guaranteed constraints: <code class="highlighter-rouge">4 ≤ n ≤ 20</code>.</p>
  </li>
  <li>
    <p>[input] integer firstNumber <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ firstNumber ≤ n - 1</code>.</p>
  </li>
  <li>
    <p>[output] integer</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def circleOfNumbers(n, firstNumber):
    return (firstNumber + n / 2) % n
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>29. chessBoardCellColor</title>
	  <link>//29-chessBoardCellColor</link>
	  <author></author>
	  <pubDate>2020-02-01T11:00:00+09:00</pubDate>
	  <guid>//29-chessBoardCellColor</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given two cells on the standard chess board, determine whether they have the same color or not.</p>

<h3 id="example">Example</h3>

<ul>
  <li>For <code class="highlighter-rouge">cell1 = "A1"</code> and <code class="highlighter-rouge">cell2 = "C3"</code>, the output should be <br />
<code class="highlighter-rouge">chessBoardCellColor(cell1, cell2) = true</code>.
<img src="./img/chess1.png" alt="chess1" /></li>
  <li>For <code class="highlighter-rouge">cell1 = "A1"</code> and <code class="highlighter-rouge">cell2 = "H3"</code>, the output should be <br />
<code class="highlighter-rouge">chessBoardCellColor(cell1, cell2) = false</code>.
<img src="./img/chess2.png" alt="chess2" /></li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string cell1 <br />
Guaranteed constraints: <code class="highlighter-rouge">cell1.length = 2</code>, <code class="highlighter-rouge">'A' ≤ cell1[0] ≤ 'H'</code>, <code class="highlighter-rouge">1 ≤ cell1[1] ≤ 8</code>.</p>
  </li>
  <li>
    <p>[input] string cell2 <br />
Guaranteed constraints: <code class="highlighter-rouge">cell2.length = 2</code>, <code class="highlighter-rouge">'A' ≤ cell2[0] ≤ 'H'</code>, <code class="highlighter-rouge">1 ≤ cell2[1] ≤ 8</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
<code class="highlighter-rouge">true</code> if both cells have the same color, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def chessBoardCellColor(cell1, cell2):
    return (ord(cell1[0]) + int(cell1[1]) + ord(cell2[0]) + int(cell2[1])) % 2 == 0
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
