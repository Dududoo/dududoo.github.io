<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>dududoo.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>Since Jan 2020...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Lithium Batteries - A Practical Application of Chemical Principles</title>
	  <link>//Lithium-Batteries;-A-Practical-Application-of-Chemical-Principles</link>
	  <author></author>
	  <pubDate>2020-03-19T13:00:00+09:00</pubDate>
	  <guid>//Lithium-Batteries;-A-Practical-Application-of-Chemical-Principles</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="the-lithium-metal-anode">The Lithium-Metal Anode</h3>

<p>금속 원소들은 쉽게 산화하여 양이온이 되고 전자를 내놓으므로 배터리의 음극(Anode)으로 적합한 특성을 가지고 있다. <br /></p>
<div style="text-align: center">
M     &rarr;    M <sup>n+</sup> + ne<sup>-</sup>
</div>
<p><br />
음극으로 쉽게 사용될 수 있는 금속들의 주요 특성은 아래의 테이블과 같다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Metal</th>
      <th style="text-align: center">Atomic Weight</th>
      <th style="text-align: center">Density (g cm<sup>-3</sup>)</th>
      <th style="text-align: center">Redox Couple</th>
      <th style="text-align: center">Standard Reduction Potential (V)</th>
      <th style="text-align: center">Electrochemical Capacity (Ah g<sup>-1</sup>)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Lithium</td>
      <td style="text-align: center">6.94</td>
      <td style="text-align: center">0.53</td>
      <td style="text-align: center">Li<sup>+</sup>/Li</td>
      <td style="text-align: center">-3.04</td>
      <td style="text-align: center">3.86</td>
    </tr>
    <tr>
      <td style="text-align: center">Sodium</td>
      <td style="text-align: center">22.99</td>
      <td style="text-align: center">0.97</td>
      <td style="text-align: center">Na<sup>+</sup>/Na</td>
      <td style="text-align: center">-2.71</td>
      <td style="text-align: center">1.17</td>
    </tr>
    <tr>
      <td style="text-align: center">Magnesium</td>
      <td style="text-align: center">24.31</td>
      <td style="text-align: center">1.74</td>
      <td style="text-align: center">Mg<sup>2+</sup>/Mg</td>
      <td style="text-align: center">-2.70</td>
      <td style="text-align: center">2.21</td>
    </tr>
    <tr>
      <td style="text-align: center">Aluminum</td>
      <td style="text-align: center">26.98</td>
      <td style="text-align: center">2.70</td>
      <td style="text-align: center">Al<sup>3+</sup>/Al</td>
      <td style="text-align: center">-1.66</td>
      <td style="text-align: center">2.98</td>
    </tr>
    <tr>
      <td style="text-align: center">Calcium</td>
      <td style="text-align: center">40.08</td>
      <td style="text-align: center">1.54</td>
      <td style="text-align: center">Ca<sup>2+</sup>/Ca</td>
      <td style="text-align: center">-2.87</td>
      <td style="text-align: center">1.34</td>
    </tr>
    <tr>
      <td style="text-align: center">Iron</td>
      <td style="text-align: center">55.85</td>
      <td style="text-align: center">7.86</td>
      <td style="text-align: center">Fe<sup>2+</sup>/Fe</td>
      <td style="text-align: center">-0.45</td>
      <td style="text-align: center">0.96</td>
    </tr>
    <tr>
      <td style="text-align: center">Zinc</td>
      <td style="text-align: center">65.39</td>
      <td style="text-align: center">7.14</td>
      <td style="text-align: center">Zn<sup>2+</sup>/Zn</td>
      <td style="text-align: center">-0.76</td>
      <td style="text-align: center">0.82</td>
    </tr>
    <tr>
      <td style="text-align: center">Cadmium</td>
      <td style="text-align: center">112.4</td>
      <td style="text-align: center">8.64</td>
      <td style="text-align: center">Cd<sup>2+</sup>/Cd</td>
      <td style="text-align: center">-0.40</td>
      <td style="text-align: center">0.48</td>
    </tr>
    <tr>
      <td style="text-align: center">Lead</td>
      <td style="text-align: center">207.2</td>
      <td style="text-align: center">11.3</td>
      <td style="text-align: center">Pb<sup>2+</sup>/Pb</td>
      <td style="text-align: center">-0.13</td>
      <td style="text-align: center">0.26</td>
    </tr>
  </tbody>
</table>

<p><em>Electrochemical capacity</em> 는 음극의 반쪽 반응(half-reaction)에서 g당 생성되는 전하량으로 정의된다. 예를 들어, 리튬의 경우 electrochemical capacity는 다음과 같이 계산된다.</p>

<script type="math/tex; mode=display">\small{({1 \ mol \ e^{-} \over mol \ Li}) \times ({mol \ Li \over 6.94 \ g \ Li}) \times ({9.65 \times 10^{4} \ C \over mol \ e^{-}}) \times ({1 \ A \ s \over C}) \times ({h \over 3600 \ s}) = 3.86 \ {A \ h \over g \ Li}}</script>

<p>테이블에서 리튬을 배터리의 음극으로 아주 적합하게 만들어주는 두 가지 특성을 볼 수 있다. 첫 번째로, 리튬 이온은 가장 낮은 환원 전위를 갖는다. 이는 이온이 금속 상태로 환원되려는 경향이 가장 작다는 것을 의미한다. 다르게 말하면, 리튬 메탈이 이온 상태로 산화되려는 경향이 가장 크다는 것을 뜻한다. 만약 다른 모든 조건들이 동일하다면 리튬 음극은 다른 금속들에 비해 가장 높은 전압을 생성할 것이다. 두 번째로, 리튬은 가장 높은 용량(electrochemical capacity)을 갖는다. 위에서 계산한 바와 같이 리튬이 아주 작은 원자량을 갖기 때문이다. 따라서 리튬 음극은 단위무게당 가장 큰 전하량을 생성할 것이다. 배터리에서 생성되는 에너지는 전압과 전하량의 곱과 같다. 그러므로 위에서 말한 두 가지 특성은 리튬 배터리가 아주 높은 단위무게당 에너지를 생성한다는 것을 의미한다.</p>

<h3 id="electrolyte-salts-and-solvents">Electrolyte Salts and Solvents</h3>

<p>배터리 전해질의 역할은 음극과 양극이 직접적으로 반응하지 못하도록 분리시키고 이온이 두 전극 사이에서 이동할 수 있도록 하는 것이다. 대부분의 배터리는 염(salt)이 물에 녹아있는 수용액을 전해질로 사용한다. 하지만 리튬 배터리에서는 금속이 물이나 다른 양성자성 용매(protic solvent)들과 반응하여 수소 가스를 발생시키므로 이들을 사용할 수 없다. 따라서 리튬 배터리의 전해질은 금속과 반응하지 않는 비양성자성(aprotic)이면서 리튬염을 잘 녹일만큼 충분히 극성(polar)이고 높은 이온 전도도를 가져야 한다. Acetonitrile(AN), ethylene Carbonate(EC), diethyl Carbonate(DEC), dimethyl Carbonate(DMC), 1,2-dimethoxyethane(DME), propylene carbonate(PC), dimethylsulfoxide(DMSO), tetrahydrofuran(THF) 등의 많은 유기 용매들이 이러한 조건에 부합된다.</p>

<p>다음으로 해야 할 것은 이러한 용매들에 잘 녹는 리튬 염을 찾는 것이다. 일반적으로, 염의 격자 에너지(lattice energy)가 낮을 때 높은 용해도를 갖는다. 작은 리튬 양이온은 큰 음이온과 짝을 이룰 때 이를 만족시킨다. 이러한 염의 예로는 LiClO<sub>4</sub>, LiPF<sub>6</sub>, LiBr, LiBF<sub>4</sub>, LiCF<sub>3</sub>SO<sub>3</sub>, LiAlCl<sub>4</sub> 등이 있다. 이 염들은 위에서 말한 용매들에 잘 용해되면서 높은 이온 전도도를 갖는 용액을 만든다. 이제 마지막으로 양극을 선택해야 한다.</p>

<figure>
  <img src="./img/LiMetalFeS2Battery.png" alt="Li-FeS2 Battery" />
  <figcaption><center><font size="3em">FeS<sub>2</sub>를 양극으로 사용한 리튬 메탈 배터리</font></center></figcaption>
</figure>

<p><br /></p>

<h3 id="solid-liquid-and-gas-cathodes">Solid, Liquid, and Gas Cathodes</h3>

<p>리튬 배터리의 양극은 음극에서 생성된 리튬 이온과 전자를 받아 환원 반응을 일으켜야 한다. FeS<sub>2</sub>는 이러한 역할을 할 수 있는 많은 물질들 중 하나이다.</p>
<center>
    FeS<sub>2</sub>(s) + 4Li<sup>+</sup>(solv) + 4e<sup>-</sup>     &rarr;    Fe(s) + 2Li<sub>2</sub>S(s)
</center>

	  ]]></description>
	</item>

	<item>
	  <title>Ni-Rich Cathode Materials for Lithium-Ion Batteries</title>
	  <link>//Battery1</link>
	  <author></author>
	  <pubDate>2020-03-04T13:00:00+09:00</pubDate>
	  <guid>//Battery1</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="ncm">NCM</h3>

<p>LiCoO<sub>2</sub> (LCO), LiMnO<sub>2</sub> (LMO), LiFePO<sub>4</sub> (LFP) 등의 많은 층상 구조 양극 물질들은 transition metal slab, lithium slab, oxygen slab으로 이루어져 있다. 리튬의 diffusivity는 active-state의 리튬과 transition metal의 정전기적 상호작용에 의한 active site의 에너지에 영향을 받는다.</p>

<p><img src="./img/lmostructure.jpg" alt="LMO structure" /></p>

<p>예를 들어, LCO는 Li 이온과 CoO<sub>6</sub> octahedra가 ABCABC의 순서로 쌓여있는 층상 구조로 인해 높은 Li<sup>+</sup> 이온 모빌리티를 가지며 4.2V vs Li<sup>0</sup>/Li<sup>+</sup>의 퍼텐셜에서 272mAh/g의 theoretical specific capacity를 보인다. 하지만 practical capacity는 약 150mAh/g로 훨씬 낮은 값을 나타내는데, 이는 Li/Co 비율이 0.5보다 낮을 때 rhombohedral에서 monoclinic phase로의 irreversible phase transition이 일어나고 Li deintercalation을 억제하기 때문이다. Transition metal layer에 Nickel 이온을 넣는 것은 rhomboheral phase를 안정화시키고 용량을 늘리는 데에 효과적인 방법이다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Hash - 4. 베스트앨범</title>
	  <link>//Hash4</link>
	  <author></author>
	  <pubDate>2020-02-19T13:00:00+09:00</pubDate>
	  <guid>//Hash4</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>스트리밍 사이트에서 장르 별로 가장 많이 재생된 노래를 두 개씩 모아 베스트 앨범을 출시하려 합니다. 노래는 고유 번호로 구분하며, 노래를 수록하는 기준은 다음과 같습니다.</p>

<ol>
  <li>속한 노래가 많이 재생된 장르를 먼저 수록합니다.</li>
  <li>장르 내에서 많이 재생된 노래를 먼저 수록합니다.</li>
  <li>장르 내에서 재생 횟수가 같은 노래 중에서는 고유 번호가 낮은 노래를 먼저 수록합니다.</li>
</ol>

<p>노래의 장르를 나타내는 문자열 배열 genres와 노래별 재생 횟수를 나타내는 정수 배열 plays가 주어질 때, 베스트 앨범에 들어갈 노래의 고유 번호를 순서대로 return 하도록 solution 함수를 완성하세요.</p>

<h3 id="example">Example</h3>

<table>
  <thead>
    <tr>
      <th>genres</th>
      <th>plays</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[“classic”, “pop”, “classic”, “classic”, “pop”]</td>
      <td>[500, 600, 150, 800, 2500]</td>
      <td>[4, 1, 3, 0]</td>
    </tr>
  </tbody>
</table>

<p>classic 장르는 1,450회 재생되었으며, classic 노래는 다음과 같습니다.</p>

<ul>
  <li>고유 번호 3: 800회 재생</li>
  <li>고유 번호 0: 500회 재생</li>
  <li>고유 번호 2: 150회 재생</li>
</ul>

<p>pop 장르는 3,100회 재생되었으며, pop 노래는 다음과 같습니다.</p>

<ul>
  <li>고유 번호 4: 2,500회 재생</li>
  <li>고유 번호 1: 600회 재생</li>
</ul>

<p>따라서 pop 장르의 [4, 1]번 노래를 먼저, classic 장르의 [3, 0]번 노래를 그다음에 수록합니다.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>genres[i]는 고유번호가 i인 노래의 장르입니다.</p>
  </li>
  <li>
    <p>plays[i]는 고유번호가 i인 노래가 재생된 횟수입니다.</p>
  </li>
  <li>
    <p>genres와 plays의 길이는 같으며, 이는 1 이상 10,000 이하입니다.</p>
  </li>
  <li>
    <p>장르 종류는 100개 미만입니다.</p>
  </li>
  <li>
    <p>장르에 속한 곡이 하나라면, 하나의 곡만 선택합니다.</p>
  </li>
  <li>
    <p>모든 장르는 재생된 횟수가 다릅니다.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def pickMost(genres, plays, genre):    # 장르 내에서 가장 많이 재생된 곡의 고유번호 리턴
    mostPlay = -1
    for i in range(len(genres)):
        if genres[i] == genre:
            if plays[i] &gt; mostPlay:
                mostPlay = plays[i]
                mostPlay_i = i
    return mostPlay_i

def solution(genres, plays):
    genreCount = {}
    for i in range(len(genres)):
        if genres[i] in genreCount:
            genreCount[genres[i]] += plays[i]
        else:
            genreCount[genres[i]] = plays[i]
    answer = []
    while len(genreCount) &gt; 0:
        mostGenre = max(genreCount.keys(), key = lambda genre: genreCount[genre])
        answer.append(pickMost(genres, plays, mostGenre))
        if genres.count(mostGenre) &gt; 1:    # 장르에 속한 곡이 하나인 경우 제외
            plays[answer[-1]] = -1
            answer.append(pickMost(genres, plays, mostGenre))
        del genreCount[mostGenre]        
    return answer
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>Hash - 3. 위장</title>
	  <link>//Hash3</link>
	  <author></author>
	  <pubDate>2020-02-19T12:00:00+09:00</pubDate>
	  <guid>//Hash3</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다.</p>

<p>예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다.</p>

<table>
  <thead>
    <tr>
      <th>종류</th>
      <th>이름</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>얼굴</td>
      <td>동그란 안경, 검정 선글라스</td>
    </tr>
    <tr>
      <td>상의</td>
      <td>파란색 티셔츠</td>
    </tr>
    <tr>
      <td>하의</td>
      <td>청바지</td>
    </tr>
    <tr>
      <td>겉옷</td>
      <td>긴 코트</td>
    </tr>
  </tbody>
</table>

<p>스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.</p>

<h3 id="example">Example</h3>

<table>
  <thead>
    <tr>
      <th>clothes</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[[“yellow_hat”, “headgear”], [“blue_sunglasses”, “eyewear”], [“green_turban”, “headgear”]]</td>
      <td>5</td>
    </tr>
    <tr>
      <td>[[“crow_mask”, “face”], [“blue_sunglasses”, “face”], [“smoky_makeup”, “face”]]</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>예제 1 <br />
headgear에 해당하는 의상이 yellow_hat, green_turban이고 eyewear에 해당하는 의상이 blue_sunglasses이므로 아래와 같이 5개의 조합이 가능합니다.</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. yellow_hat
2. blue_sunglasses
3. green_turban
4. yellow_hat + blue_sunglasses
5. green_turban + blue_sunglasses
</code></pre></div>    </div>
  </li>
  <li>
    <p>예제 2 <br />
face에 해당하는 의상이 crow_mask, blue_sunglasses, smoky_makeup이므로 아래와 같이 3개의 조합이 가능합니다.</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. crow_mask
2. blue_sunglasses
3. smoky_makeup
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>clothes의 각 행은 [의상의 이름, 의상의 종류]로 이루어져 있습니다.</p>
  </li>
  <li>
    <p>스파이가 가진 의상의 수는 1개 이상 30개 이하입니다.</p>
  </li>
  <li>
    <p>같은 이름을 가진 의상은 존재하지 않습니다.</p>
  </li>
  <li>
    <p>clothes의 모든 원소는 문자열로 이루어져 있습니다.</p>
  </li>
  <li>
    <p>모든 문자열의 길이는 1 이상 20 이하인 자연수이고 알파벳 소문자 또는 <code class="highlighter-rouge">_</code> 로만 이루어져 있습니다.</p>
  </li>
  <li>
    <p>스파이는 하루에 최소 한 개의 의상은 입습니다.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def solution(clothes):
    types = {}
    for row in clothes:
        if row[-1] in types:
            types[row[-1]] += 1
        else:
            types[row[-1]] = 1
    combination = 1
    for count in types.values():
        combination *= (count + 1)
    return combination - 1
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>Hash - 2. 전화번호 목록</title>
	  <link>//Hash2</link>
	  <author></author>
	  <pubDate>2020-02-19T11:00:00+09:00</pubDate>
	  <guid>//Hash2</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다. <br />
전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.</p>

<ul>
  <li>구조대 : 119</li>
  <li>박준영 : 97 674 223</li>
  <li>지영석 : 11 9552 4421</li>
</ul>

<p>전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.</p>

<h3 id="example">Example</h3>

<table>
  <thead>
    <tr>
      <th>phone_book</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[“119”, “97674223”, “1195524421”]</td>
      <td>false</td>
    </tr>
    <tr>
      <td>[“123”, “456”, “789”]</td>
      <td>true</td>
    </tr>
    <tr>
      <td>[“12”, “123”, “1235”, “567”, “88”]</td>
      <td>false</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>예제 1 <br />
앞에서 설명한 예와 같습니다.</p>
  </li>
  <li>
    <p>예제 2 <br />
한 번호가 다른 번호의 접두사인 경우가 없으므로, 답은 true입니다.</p>
  </li>
  <li>
    <p>예제 3 <br />
첫 번째 전화번호, “12”가 두 번째 전화번호 “123”의 접두사입니다. 따라서 답은 false입니다.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>phone_book의 길이는 1 이상 1,000,000 이하입니다.</p>
  </li>
  <li>
    <p>각 전화번호의 길이는 1 이상 20 이하입니다.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def solution(phone_book):
    phone_book.sort()
    for i in range(len(phone_book) - 1):
        if phone_book[i + 1][:len(phone_book[i])] == phone_book[i]:
            return False
    return True
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>Hash - 1. 완주하지 못한 선수</title>
	  <link>//Hash1</link>
	  <author></author>
	  <pubDate>2020-02-19T10:00:00+09:00</pubDate>
	  <guid>//Hash1</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.</p>

<p>마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.</p>

<h3 id="example">Example</h3>

<table>
  <thead>
    <tr>
      <th>participant</th>
      <th>completion</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[leo, kiki, eden]</td>
      <td>[eden, kiki]</td>
      <td>“leo”</td>
    </tr>
    <tr>
      <td>[marina, josipa, nikola, vinko, filipa]</td>
      <td>[josipa, filipa, marina, nikola]</td>
      <td>“vinko”</td>
    </tr>
    <tr>
      <td>[mislav, stanko, mislav, ana]</td>
      <td>[stanko, ana, mislav]</td>
      <td>“mislav”</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>예제 1 <br />
“leo”는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.</p>
  </li>
  <li>
    <p>예제 2 <br />
“vinko”는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.</p>
  </li>
  <li>
    <p>예제 3 <br />
“mislav”는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.</p>
  </li>
  <li>
    <p>completion의 길이는 participant의 길이보다 1 작습니다.</p>
  </li>
  <li>
    <p>참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.</p>
  </li>
  <li>
    <p>참가자 중에는 동명이인이 있을 수 있습니다.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def solution(participant, completion):
    participant.sort()
    completion.sort()
    for i in range(len(completion)):
        if participant[i] != completion[i]:
            return participant[i]
    return participant[-1]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>60. Sudoku</title>
	  <link>//60-sudoku</link>
	  <author></author>
	  <pubDate>2020-02-15T13:00:00+09:00</pubDate>
	  <guid>//60-sudoku</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p><em>Sudoku</em> is a number-placement puzzle. The objective is to fill a <code class="highlighter-rouge">9 × 9</code> grid with digits so that each column, each row, and each of the nine <code class="highlighter-rouge">3 × 3</code> sub-grids that compose the grid contains all of the digits from <code class="highlighter-rouge">1</code> to <code class="highlighter-rouge">9</code>.</p>

<p>This algorithm should check if the given grid of numbers represents a correct solution to Sudoku.</p>

<h3 id="example">Example</h3>

<ul>
  <li>For
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grid = [[1, 3, 2, 5, 4, 6, 9, 8, 7],
        [4, 6, 5, 8, 7, 9, 3, 2, 1],
        [7, 9, 8, 2, 1, 3, 6, 5, 4],
        [9, 2, 1, 4, 3, 5, 8, 7, 6],
        [3, 5, 4, 7, 6, 8, 2, 1, 9],
        [6, 8, 7, 1, 9, 2, 5, 4, 3],
        [5, 7, 6, 9, 8, 1, 4, 3, 2],
        [2, 4, 3, 6, 5, 7, 1, 9, 8],
        [8, 1, 9, 3, 2, 4, 7, 6, 5]]
</code></pre></div>    </div>
    <p>the output should be <br />
<code class="highlighter-rouge">sudoku(grid) = true</code>;</p>
  </li>
  <li>For
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grid = [[1, 3, 2, 5, 4, 6, 9, 2, 7],
        [4, 6, 5, 8, 7, 9, 3, 8, 1],
        [7, 9, 8, 2, 1, 3, 6, 5, 4],
        [9, 2, 1, 4, 3, 5, 8, 7, 6],
        [3, 5, 4, 7, 6, 8, 2, 1, 9],
        [6, 8, 7, 1, 9, 2, 5, 4, 3],
        [5, 7, 6, 9, 8, 1, 4, 3, 2],
        [2, 4, 3, 6, 5, 7, 1, 9, 8],
        [8, 1, 9, 3, 2, 4, 7, 6, 5]]
</code></pre></div>    </div>
    <p>the output should be <br />
<code class="highlighter-rouge">sudoku(grid) = false</code>. <br /><br />
The output should be <code class="highlighter-rouge">false</code>: each of the nine <code class="highlighter-rouge">3 × 3</code> sub-grids should contain all of the digits from <code class="highlighter-rouge">1</code> to <code class="highlighter-rouge">9</code>. <br />
These examples are represented on the image below.
<img src="./img/sudoku.png" alt="sudoku" /></p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] array.array.integer grid</strong> <br />
A matrix representing <code class="highlighter-rouge">9 × 9</code> grid already filled with numbers from <code class="highlighter-rouge">1</code> to <code class="highlighter-rouge">9</code>. <br />
Guaranteed constraints: <code class="highlighter-rouge">grid.length = 9</code>, <code class="highlighter-rouge">grid[i].length = 9</code>, <code class="highlighter-rouge">1 ≤ grid[i][j] ≤ 9</code>.</p>
  </li>
  <li>
    <p><strong>[output] boolean</strong> <br />
<code class="highlighter-rouge">true</code> if the given grid represents a correct solution to Sudoku, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def sudoku(grid):
    rowTrue = all([set(grid[row]) == set(range(1, 10)) for row in range(9)])
    columnTrue = all([set([grid[row][column] for row in range(9)]) == set(range(1, 10))
                      for column in range(9)])
    subGridTrue = True
    for column in range(3):
        for i in range(3):
            subGrid = set()
            for row in range(3 * i, 3 * (i + 1)):
                for j in range(3):
                    subGrid.add(grid[row][3 * column + j])
            if subGrid != set(range(1, 10)):
                subGridTrue = False
    return rowTrue and columnTrue and subGridTrue
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>59. spiralNumbers</title>
	  <link>//59-spiralNumbers</link>
	  <author></author>
	  <pubDate>2020-02-15T12:00:00+09:00</pubDate>
	  <guid>//59-spiralNumbers</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Construct a square matrix with a size <code class="highlighter-rouge">N × N</code> containing integers from <code class="highlighter-rouge">1</code> to <code class="highlighter-rouge">N * N</code> in a spiral order, starting from top-left and in clockwise direction.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">n = 3</code>, the output should be</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spiralNumbers(n) = [[1, 2, 3],
                    [8, 9, 4],
                    [7, 6, 5]]
</code></pre></div></div>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] integer n</strong> <br />
Matrix size, a positive integer. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ n ≤ 100</code>.</p>
  </li>
  <li>
    <p><strong>[output] array.array.integer</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def edge(spiralMatrix, n, step):
    start = 1
    for j in range(step):
        start += (n - j * 2 - 1) * 4
    for i in range(n - step * 2):
        spiralMatrix[step][step + i] = start + i
    for i in range(n - step * 2 - 1):
        spiralMatrix[step + i][-1 - step] = start + (n - (step * 2) - 1) + i
        spiralMatrix[-1 - step][-1 - step - i] = start + (n - 1 - step * 2) * 2 + i
        spiralMatrix[-1 - step - i][step] = start + (n - 1 - step * 2) * 3 + i
    return

def spiralNumbers(n):
    spiralMatrix = [[0] * n for i in range(n)]
    for step in range((n + 1) // 2):
        edge(spiralMatrix, n, step)
    return spiralMatrix
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>58.messageFromBinaryCode</title>
	  <link>//58-messageFromBinaryCode</link>
	  <author></author>
	  <pubDate>2020-02-15T11:00:00+09:00</pubDate>
	  <guid>//58-messageFromBinaryCode</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>You are taking part in an Escape Room challenge designed specifically for programmers. In your efforts to find a clue, you’ve found a binary code written on the wall behind a vase, and realized that it must be an encrypted message. After some thought, your first guess is that each consecutive 8 bits of the code stand for the character with the corresponding <em>extended ASCII code</em>.</p>

<p>Assuming that your hunch is correct, decode the message.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">code = "010010000110010101101100011011000110111100100001"</code>, the output should be <br />
<code class="highlighter-rouge">messageFromBinaryCode(code) = "Hello!"</code>.</p>

<p>The first 8 characters of the code are <code class="highlighter-rouge">01001000</code>, which is <code class="highlighter-rouge">72</code> in the binary numeral system. <code class="highlighter-rouge">72</code> stands for <code class="highlighter-rouge">H</code> in the <em>ASCII-table</em>, so the first letter is H. <br />
Other letters can be obtained in the same manner.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string code</strong> <br />
A string, the encrypted message consisting of characters <code class="highlighter-rouge">'0'</code> and <code class="highlighter-rouge">'1'</code>. <br />
Guaranteed constraints: <code class="highlighter-rouge">0 &lt; code.length &lt; 800</code>.</p>
  </li>
  <li>
    <p><strong>[output] string</strong> <br />
The decrypted message.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def messageFromBinaryCode(code):
    message = ''
    for i in range(len(code) // 8):
        message += chr(int('0b' + code[8 * i:8 * (i + 1)], 2))
    return message
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>57. File Naming</title>
	  <link>//57-fileNaming</link>
	  <author></author>
	  <pubDate>2020-02-15T10:00:00+09:00</pubDate>
	  <guid>//57-fileNaming</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>You are given an array of desired filenames in the order of their creation. Since two files cannot have equal names, the one which comes later will have an addition to its name in a form of <code class="highlighter-rouge">(k)</code>, where <code class="highlighter-rouge">k</code> is the smallest positive integer such that the obtained name is not used yet.</p>

<p>Return an array of names that will be given to the files.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">names = ["doc", "doc", "image", "doc(1)", "doc"]</code>, the output should be <br />
<code class="highlighter-rouge">fileNaming(names) = ["doc", "doc(1)", "image", "doc(1)(1)", "doc(2)"]</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] array.string names</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">5 ≤ names.length ≤ 1000</code>, <code class="highlighter-rouge">1 ≤ names[i].length ≤ 15</code>.</p>
  </li>
  <li>
    <p><strong>[output] array.string</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def fileNaming(names):
    fileNames = []
    for name in names:
        if name in fileNames:
            name = name + '(1)'
            while name in fileNames:
                name = name[:-2] + str(int(name[-2]) + 1) + ')'
            fileNames.append(name)
        else:
            fileNames.append(name)
    return fileNames
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
