<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>dududoo.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>Since Jan 2020...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>17. arrayChange</title>
	  <link>//17-arrayChange</link>
	  <author></author>
	  <pubDate>2020-01-28T14:00:00+09:00</pubDate>
	  <guid>//17-arrayChange</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>You are given an array of integers. On each move you are allowed to increase exactly one of its element by one. Find the minimal number of moves required to obtain a strictly increasing sequence from the input.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputArray = [1, 1, 1]</code>, the output should be <br />
<code class="highlighter-rouge">arrayChange(inputArray) = 3</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer inputArray <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ inputArray.length ≤ 105</code>, <code class="highlighter-rouge">-105 ≤ inputArray[i] ≤ 105</code>.</p>
  </li>
  <li>
    <p>[output] integer <br />
The minimal number of moves needed to obtain a strictly increasing sequence from <code class="highlighter-rouge">inputArray</code>. <br />
It’s guaranteed that for the given test cases the answer always fits signed 32-bit integer type.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def arrayChange(inputArray):
    increase = 0
    for i in range(1, len(inputArray)):
        if inputArray[i - 1] &gt;= inputArray[i]:
            increase += inputArray[i - 1] - inputArray[i] + 1
            inputArray[i] = inputArray[i - 1] + 1
    return increase

</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>16. Are Similar?</title>
	  <link>//16-areSimilar</link>
	  <author></author>
	  <pubDate>2020-01-28T13:00:00+09:00</pubDate>
	  <guid>//16-areSimilar</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Two arrays are called similar if one can be obtained from another by swapping at most one pair of elements in one of the arrays.</p>

<p>Given two arrays <code class="highlighter-rouge">a</code> and <code class="highlighter-rouge">b</code>, check whether they are similar.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">a = [1, 2, 3]</code> and <code class="highlighter-rouge">b = [1, 2, 3]</code>, the output should be <br />
<code class="highlighter-rouge">areSimilar(a, b) = true</code>. <br />
The arrays are equal, no need to swap any elements.</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">a = [1, 2, 3]</code> and <code class="highlighter-rouge">b = [2, 1, 3]</code>, the output should be <br />
<code class="highlighter-rouge">areSimilar(a, b) = true</code>. <br />
We can obtain <code class="highlighter-rouge">b</code> from <code class="highlighter-rouge">a</code> by swapping <code class="highlighter-rouge">2</code> and <code class="highlighter-rouge">1</code> in <code class="highlighter-rouge">b</code>. <br />
For <code class="highlighter-rouge">a = [1, 2, 2]</code> and <code class="highlighter-rouge">b = [2, 1, 1]</code>, the output should be <br />
<code class="highlighter-rouge">areSimilar(a, b) = false</code>. <br />
Any swap of any two elements either in <code class="highlighter-rouge">a</code> or in <code class="highlighter-rouge">b</code> won’t make <code class="highlighter-rouge">a</code> and <code class="highlighter-rouge">b</code> equal.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer a <br />
Array of integers. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ a.length ≤ 105</code>, <code class="highlighter-rouge">1 ≤ a[i] ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[input] array.integer b <br />
Array of integers of the same length as <code class="highlighter-rouge">a</code>. <br />
Guaranteed constraints: <code class="highlighter-rouge">b.length = a.length</code>, <code class="highlighter-rouge">1 ≤ b[i] ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
<code class="highlighter-rouge">true</code> if <code class="highlighter-rouge">a</code> and <code class="highlighter-rouge">b</code> are similar, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def areSimilar(a, b):
    i = 0
    fstIndx = -1
    sndIndx = -1
    while i &lt; len(a):
        if a[i] != b[i]:
            fstIndx = i
            i += 1
            break
        i += 1
    while i &lt; len(a):
        if a[i] != b[i]:
            sndIndx = i
            i += 1
            break
        i += 1
    while i &lt; len(a):
        if a[i] != b[i]:
            return False
        i += 1
    if (fstIndx &lt; 0 or sndIndx &lt; 0):
        return True
    return (a[fstIndx] == b[sndIndx] and a[sndIndx] == b[fstIndx])
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>15. Add Border</title>
	  <link>//15-addBorder</link>
	  <author></author>
	  <pubDate>2020-01-28T12:00:00+09:00</pubDate>
	  <guid>//15-addBorder</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a rectangular matrix of characters, add a border of asterisks(<code class="highlighter-rouge">*</code>) to it.</p>

<h3 id="example">Example</h3>

<p>For</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>picture = ["abc",
           "ded"]
</code></pre></div></div>
<p>the output should be</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>addBorder(picture) = ["*****",
                      "*abc*",
                      "*ded*",
                      "*****"]
</code></pre></div></div>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.string picture <br />
A non-empty array of non-empty equal-length strings. <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ picture.length ≤ 100</code>, <code class="highlighter-rouge">1 ≤ picture[i].length ≤ 100</code>.</p>
  </li>
  <li>
    <p>[output] array.string <br />
The same matrix of characters, framed with a border of asterisks of width 1.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def addBorder(picture):
    border = ['*' + element + '*' for element in picture]
    border.insert(0, '*' * (len(picture[0]) + 2))
    border.append('*' * (len(picture[0]) + 2))
    return border
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>14. alternatingSums</title>
	  <link>//14-alternatingSums</link>
	  <author></author>
	  <pubDate>2020-01-28T11:00:00+09:00</pubDate>
	  <guid>//14-alternatingSums</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Several people are standing in a row and need to be divided into two teams. The first person goes into team 1, the second goes into team 2, the third goes into team 1 again, the fourth into team 2, and so on.</p>

<p>You are given an array of positive integers - the weights of the people. Return an array of two integers, where the first element is the total weight of team 1, and the second element is the total weight of team 2 after the division is complete.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">a = [50, 60, 60, 45, 70]</code>, the output should be <br />
<code class="highlighter-rouge">alternatingSums(a) = [180, 105]</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer a <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ a.length ≤ 105</code>, <code class="highlighter-rouge">45 ≤ a[i] ≤ 100</code>.</p>
  </li>
  <li>
    <p>[output] array.integer</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def alternatingSums(a):
    return [sum(a[::2]), sum(a[1::2])]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>13. reverseInParentheses</title>
	  <link>//13-reverseInParentheses</link>
	  <author></author>
	  <pubDate>2020-01-28T10:00:00+09:00</pubDate>
	  <guid>//13-reverseInParentheses</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Write a function that reverses characters in (possibly nested) parentheses in the input string.</p>

<p>Input strings will always be well-formed with matching <code class="highlighter-rouge">()</code>s.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "(bar)"</code>, the output should be <br />
<code class="highlighter-rouge">reverseInParentheses(inputString) = "rab"</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "foo(bar)baz"</code>, the output should be <br />
<code class="highlighter-rouge">reverseInParentheses(inputString) = "foorabbaz"</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "foo(bar)baz(blim)"</code>, the output should be <br />
<code class="highlighter-rouge">reverseInParentheses(inputString) = "foorabbazmilb"</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "foo(bar(baz))blim"</code>, the output should be <br />
<code class="highlighter-rouge">reverseInParentheses(inputString) = "foobazrabblim"</code>. <br />
Because <code class="highlighter-rouge">"foo(bar(baz))blim"</code> becomes <code class="highlighter-rouge">"foo(barzab)blim"</code> and then <code class="highlighter-rouge">"foobazrabblim"</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string inputString <br />
A string consisting of lowercase English letters and the characters <code class="highlighter-rouge">(</code> and <code class="highlighter-rouge">)</code>. It is guaranteed that all parentheses in <code class="highlighter-rouge">inputString</code> form a regular bracket sequence. <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ inputString.length ≤ 50</code>.</p>
  </li>
  <li>
    <p>[output] string <br />
Return <code class="highlighter-rouge">inputString</code>, with all the characters that were in parentheses reversed.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def reverseInParentheses(inputString):
    i = 0
    rev = ''
    while i &lt; len(inputString):
        if inputString[i] == '(':
            j, revPar = reverseInParentheses(inputString[i + 1:])
            rev += revPar
            i += j + 2
        elif inputString[i] == ')':
            return i, rev[::-1]
        else:
            rev += inputString[i]
            i += 1
    return rev
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>12. Sort by Height</title>
	  <link>//12-SortByHeight</link>
	  <author></author>
	  <pubDate>2020-01-28T09:00:00+09:00</pubDate>
	  <guid>//12-SortByHeight</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Some people are standing in a row in a park. There are trees between them which cannot be moved. Your task is to rearrange the people by their heights in a non-descending order without moving the trees. People can be very tall!</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">a = [-1, 150, 190, 170, -1, -1, 160, 180]</code>, the output should be <code class="highlighter-rouge">sortByHeight(a) = [-1, 150, 160, 170, -1, -1, 180, 190]</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer a <br />
If <code class="highlighter-rouge">a[i] = -1</code>, then the ith position is occupied by a tree. Otherwise <code class="highlighter-rouge">a[i]</code> is the height of a person standing in the ith position. <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ a.length ≤ 1000</code>, <code class="highlighter-rouge">-1 ≤ a[i] ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[output] array.integer <br />
Sorted array <code class="highlighter-rouge">a</code> with all the trees untouched.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def mergeSort(array, left, right):
    if right - left &lt; 2:
        return
    mergeSort(array, left, left + (right - left) // 2)
    mergeSort(array, left + (right - left) // 2, right)
    temp = [0 for i in array]
    lCur = left
    rCur = left + (right - left) // 2
    tCur = left
    while lCur &lt; left + (right - left) // 2 and rCur &lt; right:
        if array[lCur] &lt; array[rCur]:
            temp[tCur] = array[lCur]
            lCur += 1
            tCur += 1
        else:
            temp[tCur] = array[rCur]
            rCur += 1
            tCur += 1
    while tCur &lt; right:
        if lCur == left + (right - left) // 2:
            temp[tCur] = array[rCur]
            rCur += 1
            tCur += 1
        else:
            temp[tCur] = array[lCur]
            lCur += 1
            tCur += 1
    array[left:right] = temp[left:right]
    return


def sortByHeight(a):
    people = [height for height in a if height &gt; -1]
    mergeSort(people, 0, len(people))
    i = 0
    j = 0
    while i &lt; len(a):
        if a[i] == -1:
            i += 1
        else:
            a[i] = people[j]
            i += 1
            j += 1
    return a
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>11. isLucky</title>
	  <link>//11-isLucky</link>
	  <author></author>
	  <pubDate>2020-01-27T10:15:00+09:00</pubDate>
	  <guid>//11-isLucky</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Ticket numbers usually consist of an even number of digits. A ticket number is considered lucky if the sum of the first half of the digits is equal to the sum of the second half.</p>

<p>Given a ticket number <code class="highlighter-rouge">n</code>, determine if it’s lucky or not.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">n = 1230</code>, the output should be <code class="highlighter-rouge">isLucky(n) = true</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">n = 239017</code>, the output should be <code class="highlighter-rouge">isLucky(n) = false</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] integer n <br />
A ticket number represented as a positive integer with an even number of digits. <br />
Guaranteed constraints: <code class="highlighter-rouge">10 ≤ n &lt; 106</code>.</p>
  </li>
  <li>
    <p>[output] boolean <br />
<code class="highlighter-rouge">true</code> if <code class="highlighter-rouge">n</code> is a lucky ticket number, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def isLucky(n):
    strN = str(n)
    i = 0
    fstSum = 0
    sndSum = 0
    while i &lt; len(strN) / 2:
        fstSum += int(strN[i])
        i += 1
    while i &lt; len(strN):
        sndSum += int(strN[i])
        i += 1
    return fstSum == sndSum
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>10. commonCharacterCount</title>
	  <link>//10-commonCharacterCount</link>
	  <author></author>
	  <pubDate>2020-01-24T21:00:00+09:00</pubDate>
	  <guid>//10-commonCharacterCount</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given two strings, find the number of common characters between them.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">s1 = "aabcc"</code> and <code class="highlighter-rouge">s2 = "adcaa"</code>, the output should be
<code class="highlighter-rouge">commonCharacterCount(s1, s2) = 3</code>.</p>

<p>Strings have 3 common characters - 2 “a”s and 1 “c”.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string s1 <br />
A string consisting of lowercase English letters. <br />
Guaranteed constraints: 1 ≤ s1.length &lt; 15.</p>
  </li>
  <li>
    <p>[input] string s2 <br />
A string consisting of lowercase English letters. <br />
Guaranteed constraints: 1 ≤ s2.length &lt; 15.</p>
  </li>
  <li>
    <p>[output] integer</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def commonCharacterCount(s1, s2):
    fstCount = {}
    sndCount = {}
    commonCount = 0
    for letter in s1:
        if letter in fstCount:
            fstCount[letter] += 1
        else:
            fstCount[letter] = 1
    for letter in s2:
        if letter in sndCount:
            sndCount[letter] += 1
        else:
            sndCount[letter] = 1
    for key, val in fstCount.items():
        if key in sndCount:
            commonCount += min(val, sndCount[key])
    return commonCount
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>9. All Longest Strings</title>
	  <link>//9-AllLongestStrings</link>
	  <author></author>
	  <pubDate>2020-01-24T20:00:00+09:00</pubDate>
	  <guid>//9-AllLongestStrings</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given an array of strings, return another array containing all of its longest strings.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputArray = ["aba", "aa", "ad", "vcd", "aba"]</code>, the output should be
<code class="highlighter-rouge">allLongestStrings(inputArray) = ["aba", "vcd", "aba"]</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.string inputArray <br />
A non-empty array. <br />
Guaranteed constraints: 1 ≤ inputArray.length ≤ 10, 1 ≤ inputArray[i].length ≤ 10.</p>
  </li>
  <li>
    <p>[output] array.string <br />
Array of the longest strings, stored in the same order as in the inputArray.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def allLongestStrings(inputArray):
    maxLength = 0
    for element in inputArray:
        if len(element) &gt;= maxLength:
            maxLength = len(element)
    LongestStrings = [element for element in inputArray if len(element) == maxLength]
    return LongestStrings
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>8. matrixElementsSum</title>
	  <link>//8-matrixElementsSum</link>
	  <author></author>
	  <pubDate>2020-01-24T19:00:00+09:00</pubDate>
	  <guid>//8-matrixElementsSum</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>After becoming famous, the CodeBots decided to move into a new building together. Each of the rooms has a different cost, and some of them are free, but there’s a rumour that all the free rooms are haunted! Since the CodeBots are quite superstitious, they refuse to stay in any of the free rooms, or any of the rooms below any of the free rooms.</p>

<p>Given matrix, a rectangular matrix of integers, where each value represents the cost of the room, your task is to return the total sum of all rooms that are suitable for the CodeBots (ie: add up all the values that don’t appear below a 0).</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>matrix = [[0, 1, 1, 2],
          [0, 5, 0, 0],
          [2, 0, 3, 3]]
</code></pre></div>    </div>

    <p>the output should be <code class="highlighter-rouge">matrixElementsSum(matrix) = 9</code></p>

    <p><img src="./img/example1.png" alt="example1" /></p>

    <p>There are several haunted rooms, so we’ll disregard them as well as any rooms beneath them. Thus, the answer is <code class="highlighter-rouge">1 + 5 + 1 + 2 = 9</code>.</p>
  </li>
  <li>
    <p>For</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>matrix = [[1, 1, 1, 0],
          [0, 5, 0, 1],
          [2, 1, 3, 10]]
</code></pre></div>    </div>
    <p>the output should be <code class="highlighter-rouge">matrixElementsSum(matrix) = 9</code></p>

    <p><img src="./img/example2.png" alt="example2" /></p>

    <p>Note that the free room in the final column makes the full column unsuitable for bots (not just the room directly beneath it). Thus, the answer is <code class="highlighter-rouge">1 + 1 + 1 + 5 + 1 = 9</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.array.integer matrix <br />
A 2-dimensional array of integers representing the cost of each room in the building. A value of 0 indicates that the room is haunted. <br />
Guaranteed constraints: 1 ≤ matrix.length ≤ 5, 1 ≤ matrix[i].length ≤ 5, 0 ≤ matrix[i][j] ≤ 10.</p>
  </li>
  <li>
    <p>[output] integer <br />
The total price of all the rooms that are suitable for the CodeBots to live in.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def matrixElementsSum(matrix):
    col = 0
    total = 0
    while col &lt; len(matrix[0]):
        row = 0
        while row &lt; len(matrix):
            if matrix[row][col] == 0:
                break
            total += matrix[row][col]
            row += 1
        col += 1
    return total
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
