<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>dududoo.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>Since Jan 2020...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>60. Sudoku</title>
	  <link>//60-sudoku</link>
	  <author></author>
	  <pubDate>2020-02-15T13:00:00+09:00</pubDate>
	  <guid>//60-sudoku</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p><em>Sudoku</em> is a number-placement puzzle. The objective is to fill a <code class="highlighter-rouge">9 × 9</code> grid with digits so that each column, each row, and each of the nine <code class="highlighter-rouge">3 × 3</code> sub-grids that compose the grid contains all of the digits from <code class="highlighter-rouge">1</code> to <code class="highlighter-rouge">9</code>.</p>

<p>This algorithm should check if the given grid of numbers represents a correct solution to Sudoku.</p>

<h3 id="example">Example</h3>

<ul>
  <li>For
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grid = [[1, 3, 2, 5, 4, 6, 9, 8, 7],
        [4, 6, 5, 8, 7, 9, 3, 2, 1],
        [7, 9, 8, 2, 1, 3, 6, 5, 4],
        [9, 2, 1, 4, 3, 5, 8, 7, 6],
        [3, 5, 4, 7, 6, 8, 2, 1, 9],
        [6, 8, 7, 1, 9, 2, 5, 4, 3],
        [5, 7, 6, 9, 8, 1, 4, 3, 2],
        [2, 4, 3, 6, 5, 7, 1, 9, 8],
        [8, 1, 9, 3, 2, 4, 7, 6, 5]]
</code></pre></div>    </div>
    <p>the output should be <br />
<code class="highlighter-rouge">sudoku(grid) = true</code>;</p>
  </li>
  <li>For
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grid = [[1, 3, 2, 5, 4, 6, 9, 2, 7],
        [4, 6, 5, 8, 7, 9, 3, 8, 1],
        [7, 9, 8, 2, 1, 3, 6, 5, 4],
        [9, 2, 1, 4, 3, 5, 8, 7, 6],
        [3, 5, 4, 7, 6, 8, 2, 1, 9],
        [6, 8, 7, 1, 9, 2, 5, 4, 3],
        [5, 7, 6, 9, 8, 1, 4, 3, 2],
        [2, 4, 3, 6, 5, 7, 1, 9, 8],
        [8, 1, 9, 3, 2, 4, 7, 6, 5]]
</code></pre></div>    </div>
    <p>the output should be <br />
<code class="highlighter-rouge">sudoku(grid) = false</code>. <br /><br />
The output should be <code class="highlighter-rouge">false</code>: each of the nine <code class="highlighter-rouge">3 × 3</code> sub-grids should contain all of the digits from <code class="highlighter-rouge">1</code> to <code class="highlighter-rouge">9</code>. <br />
These examples are represented on the image below.
<img src="./img/sudoku.png" alt="sudoku" /></p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] array.array.integer grid</strong> <br />
A matrix representing <code class="highlighter-rouge">9 × 9</code> grid already filled with numbers from <code class="highlighter-rouge">1</code> to <code class="highlighter-rouge">9</code>. <br />
Guaranteed constraints: <code class="highlighter-rouge">grid.length = 9</code>, <code class="highlighter-rouge">grid[i].length = 9</code>, <code class="highlighter-rouge">1 ≤ grid[i][j] ≤ 9</code>.</p>
  </li>
  <li>
    <p><strong>[output] boolean</strong> <br />
<code class="highlighter-rouge">true</code> if the given grid represents a correct solution to Sudoku, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def sudoku(grid):
    rowTrue = all([set(grid[row]) == set(range(1, 10)) for row in range(9)])
    columnTrue = all([set([grid[row][column] for row in range(9)]) == set(range(1, 10))
                      for column in range(9)])
    subGridTrue = True
    for column in range(3):
        for i in range(3):
            subGrid = set()
            for row in range(3 * i, 3 * (i + 1)):
                for j in range(3):
                    subGrid.add(grid[row][3 * column + j])
            if subGrid != set(range(1, 10)):
                subGridTrue = False
    return rowTrue and columnTrue and subGridTrue
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>59. spiralNumbers</title>
	  <link>//59-spiralNumbers</link>
	  <author></author>
	  <pubDate>2020-02-15T12:00:00+09:00</pubDate>
	  <guid>//59-spiralNumbers</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Construct a square matrix with a size <code class="highlighter-rouge">N × N</code> containing integers from <code class="highlighter-rouge">1</code> to <code class="highlighter-rouge">N * N</code> in a spiral order, starting from top-left and in clockwise direction.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">n = 3</code>, the output should be</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spiralNumbers(n) = [[1, 2, 3],
                    [8, 9, 4],
                    [7, 6, 5]]
</code></pre></div></div>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] integer n</strong> <br />
Matrix size, a positive integer. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ n ≤ 100</code>.</p>
  </li>
  <li>
    <p><strong>[output] array.array.integer</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def edge(spiralMatrix, n, step):
    start = 1
    for j in range(step):
        start += (n - j * 2 - 1) * 4
    for i in range(n - step * 2):
        spiralMatrix[step][step + i] = start + i
    for i in range(n - step * 2 - 1):
        spiralMatrix[step + i][-1 - step] = start + (n - (step * 2) - 1) + i
        spiralMatrix[-1 - step][-1 - step - i] = start + (n - 1 - step * 2) * 2 + i
        spiralMatrix[-1 - step - i][step] = start + (n - 1 - step * 2) * 3 + i
    return

def spiralNumbers(n):
    spiralMatrix = [[0] * n for i in range(n)]
    for step in range((n + 1) // 2):
        edge(spiralMatrix, n, step)
    return spiralMatrix
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>58.messageFromBinaryCode</title>
	  <link>//58-messageFromBinaryCode</link>
	  <author></author>
	  <pubDate>2020-02-15T11:00:00+09:00</pubDate>
	  <guid>//58-messageFromBinaryCode</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>You are taking part in an Escape Room challenge designed specifically for programmers. In your efforts to find a clue, you’ve found a binary code written on the wall behind a vase, and realized that it must be an encrypted message. After some thought, your first guess is that each consecutive 8 bits of the code stand for the character with the corresponding <em>extended ASCII code</em>.</p>

<p>Assuming that your hunch is correct, decode the message.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">code = "010010000110010101101100011011000110111100100001"</code>, the output should be <br />
<code class="highlighter-rouge">messageFromBinaryCode(code) = "Hello!"</code>.</p>

<p>The first 8 characters of the code are <code class="highlighter-rouge">01001000</code>, which is <code class="highlighter-rouge">72</code> in the binary numeral system. <code class="highlighter-rouge">72</code> stands for <code class="highlighter-rouge">H</code> in the <em>ASCII-table</em>, so the first letter is H. <br />
Other letters can be obtained in the same manner.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string code</strong> <br />
A string, the encrypted message consisting of characters <code class="highlighter-rouge">'0'</code> and <code class="highlighter-rouge">'1'</code>. <br />
Guaranteed constraints: <code class="highlighter-rouge">0 &lt; code.length &lt; 800</code>.</p>
  </li>
  <li>
    <p><strong>[output] string</strong> <br />
The decrypted message.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def messageFromBinaryCode(code):
    message = ''
    for i in range(len(code) // 8):
        message += chr(int('0b' + code[8 * i:8 * (i + 1)], 2))
    return message
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>57. File Naming</title>
	  <link>//57-fileNaming</link>
	  <author></author>
	  <pubDate>2020-02-15T10:00:00+09:00</pubDate>
	  <guid>//57-fileNaming</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>You are given an array of desired filenames in the order of their creation. Since two files cannot have equal names, the one which comes later will have an addition to its name in a form of <code class="highlighter-rouge">(k)</code>, where <code class="highlighter-rouge">k</code> is the smallest positive integer such that the obtained name is not used yet.</p>

<p>Return an array of names that will be given to the files.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">names = ["doc", "doc", "image", "doc(1)", "doc"]</code>, the output should be <br />
<code class="highlighter-rouge">fileNaming(names) = ["doc", "doc(1)", "image", "doc(1)(1)", "doc(2)"]</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] array.string names</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">5 ≤ names.length ≤ 1000</code>, <code class="highlighter-rouge">1 ≤ names[i].length ≤ 15</code>.</p>
  </li>
  <li>
    <p><strong>[output] array.string</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def fileNaming(names):
    fileNames = []
    for name in names:
        if name in fileNames:
            name = name + '(1)'
            while name in fileNames:
                name = name[:-2] + str(int(name[-2]) + 1) + ')'
            fileNames.append(name)
        else:
            fileNames.append(name)
    return fileNames
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>56. digitsProduct</title>
	  <link>//56-digitsProduct</link>
	  <author></author>
	  <pubDate>2020-02-13T15:00:00+09:00</pubDate>
	  <guid>//56-digitsProduct</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given an integer <code class="highlighter-rouge">product</code>, find the smallest positive (i.e. greater than <code class="highlighter-rouge">0</code>) integer the product of whose digits is equal to <code class="highlighter-rouge">product</code>. If there is no such integer, return <code class="highlighter-rouge">-1</code> instead.</p>

<h3 id="example">Example</h3>

<ul>
  <li>For <code class="highlighter-rouge">product = 12</code>, the output should be <br />
<code class="highlighter-rouge">digitsProduct(product) = 26</code>;</li>
  <li>For <code class="highlighter-rouge">product = 19</code>, the output should be <br />
<code class="highlighter-rouge">digitsProduct(product) = -1</code>.</li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] integer product</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">0 ≤ product ≤ 600</code>.</p>
  </li>
  <li>
    <p><strong>[output] integer</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def digitsProduct(product):
    if product == 0:
        return 10
    divisor = []
    while product &gt; 9:
        for i in reversed(range(2, 10)):
            if product % i == 0:
                divisor.append(i)
                product = product / i
                break
            if i == 2:
                return -1
    divisor.append(int(product))
    return int(''.join(map(str, divisor[::-1])))
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>55. Different Squares</title>
	  <link>//55-differentSquares</link>
	  <author></author>
	  <pubDate>2020-02-13T14:00:00+09:00</pubDate>
	  <guid>//55-differentSquares</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a rectangular matrix containing only digits, calculate the number of different <code class="highlighter-rouge">2 × 2</code> squares in it.</p>

<h3 id="example">Example</h3>

<p>For</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>matrix = [[1, 2, 1],
          [2, 2, 2],
          [2, 2, 2],
          [1, 2, 3],
          [2, 2, 1]]
</code></pre></div></div>
<p>the output should be <br />
<code class="highlighter-rouge">differentSquares(matrix) = 6</code>.</p>

<p>Here are all 6 different <code class="highlighter-rouge">2 × 2</code> squares:</p>
<ul>
  <li>1 2 <br />
2 2</li>
  <li>2 1 <br />
2 2</li>
  <li>2 2 <br />
2 2</li>
  <li>2 2 <br />
1 2</li>
  <li>2 2 <br />
2 3</li>
  <li>2 3 <br />
2 1</li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] array.array.integer matrix</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ matrix.length ≤ 100</code>, <code class="highlighter-rouge">1 ≤ matrix[i].length ≤ 100</code>, <code class="highlighter-rouge">0 ≤ matrix[i][j] ≤ 9</code>.</p>
  </li>
  <li>
    <p><strong>[output] integer</strong> <br />
The number of different <code class="highlighter-rouge">2 × 2</code> squares in <code class="highlighter-rouge">matrix</code>.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def differentSquares(matrix):
    squares = set([((matrix[row][column], matrix[row][column + 1]),
                    (matrix[row + 1][column], matrix[row + 1][column + 1]))
                  for column in range(len(matrix[0]) - 1) for row in range(len(matrix) - 1)])
    return len(squares)
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>54. sumUpNumbers</title>
	  <link>//54-sumUpNumbers</link>
	  <author></author>
	  <pubDate>2020-02-13T13:00:00+09:00</pubDate>
	  <guid>//54-sumUpNumbers</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>CodeMaster has just returned from shopping. He scanned the check of the items he bought and gave the resulting string to Ratiorg to figure out the total number of purchased items. Since Ratiorg is a bot he is definitely going to automate it, so he needs a program that sums up all the numbers which appear in the given input.</p>

<p>Help Ratiorg by writing a function that returns the sum of numbers that appear in the given <code class="highlighter-rouge">inputString</code>.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputString = "2 apples, 12 oranges"</code>, the output should be <br />
<code class="highlighter-rouge">sumUpNumbers(inputString) = 14</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string inputString</strong> <br />
Guaranteed constraints: 0 ≤ inputString.length ≤ 10<sup>5</sup>.</p>
  </li>
  <li>
    <p><strong>[output] integer</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import re

def sumUpNumbers(inputString):
    return sum([0] + list(map(int, re.findall('[0-9]+', inputString))))
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>53. Valid Time</title>
	  <link>//53-validTime</link>
	  <author></author>
	  <pubDate>2020-02-13T12:00:00+09:00</pubDate>
	  <guid>//53-validTime</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Check if the given string is a correct time representation of the 24-hour clock.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">time = "13:58"</code>, the output should be <br />
<code class="highlighter-rouge">validTime(time) = true</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">time = "25:51"</code>, the output should be <br />
<code class="highlighter-rouge">validTime(time) = false</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">time = "02:76"</code>, the output should be <br />
<code class="highlighter-rouge">validTime(time) = false</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string time</strong> <br />
A string representing time in <code class="highlighter-rouge">HH:MM</code> format. It is guaranteed that the first two characters, as well as the last two characters, are digits.</p>
  </li>
  <li>
    <p><strong>[output] boolean</strong> <br />
<code class="highlighter-rouge">true</code> if the given representation is correct, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import re

def validTime(time):
    correct = re.match('([01][0-9]|2[0-3]):[0-5][0-9]', time)
    if correct:
        return True
    else:
        return False
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>52. longestWord</title>
	  <link>//52-longestWord</link>
	  <author></author>
	  <pubDate>2020-02-13T11:00:00+09:00</pubDate>
	  <guid>//52-longestWord</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Define a <em>word</em> as a sequence of consecutive English letters. Find the longest <em>word</em> from the given string.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">text = "Ready, steady, go!"</code>, the output should be <br />
<code class="highlighter-rouge">longestWord(text) = "steady"</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string text</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">4 ≤ text.length ≤ 50</code>.</p>
  </li>
  <li>
    <p><strong>[output] string</strong> <br />
The longest <em>word</em> from <code class="highlighter-rouge">text</code>. It’s guaranteed that there is a unique output.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import re

def longestWord(text):
    wordList = re.findall('[a-zA-Z]+', text)
    lengthList = [len(word) for word in wordList]
    ix_longest = lengthList.index(max(lengthList))
    return wordList[ix_longest]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>51. deleteDigit</title>
	  <link>//51-deleteDigit</link>
	  <author></author>
	  <pubDate>2020-02-13T10:00:00+09:00</pubDate>
	  <guid>//51-deleteDigit</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given some integer, find the maximal number you can obtain by deleting exactly one digit of the given number.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">n = 152</code>, the output should be <br />
<code class="highlighter-rouge">deleteDigit(n) = 52</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">n = 1001</code>, the output should be <br />
<code class="highlighter-rouge">deleteDigit(n) = 101</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] integer n</strong> <br />
Guaranteed constraints: 10 ≤ n ≤ 10<sup>6</sup>.</p>
  </li>
  <li>
    <p><strong>[output] integer</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def deleteDigit(n):
    str_n = str(n)
    maxNumber = 0
    for i in range(len(str_n) - 1):
        if int(str_n[:i] + str_n[i + 1:]) &gt; maxNumber:
            maxNumber = int(str_n[:i] + str_n[i + 1:])
    if int(str_n[:-1]) &gt; maxNumber:
        maxNumber = int(str_n[:-1])
    return maxNumber
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
