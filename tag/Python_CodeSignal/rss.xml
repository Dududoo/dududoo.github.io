<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>dududoo.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>Since Jan 2020...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>45. buildPalindrome</title>
	  <link>//45-buildPalindrome</link>
	  <author></author>
	  <pubDate>2020-02-10T13:00:00+09:00</pubDate>
	  <guid>//45-buildPalindrome</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a string, find the shortest possible string which can be achieved by adding characters to the end of initial string to make it a palindrome.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">st = "abcdc"</code>, the output should be <br />
<code class="highlighter-rouge">buildPalindrome(st) = "abcdcba"</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string st</strong> <br />
A string consisting of lowercase English letters. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ st.length ≤ 10</code>.</p>
  </li>
  <li>
    <p><strong>[output] string</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def buildPalindrome(st):
    maxIndex = -1
    for i in range(2, len(st) + 1):
        if st[-i:] == st[:-i - 1:-1]:
            maxIndex = -i
    return st + st[:maxIndex][::-1]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>44. Find Email Domain</title>
	  <link>//44-findEmailDomain</link>
	  <author></author>
	  <pubDate>2020-02-10T12:00:00+09:00</pubDate>
	  <guid>//44-findEmailDomain</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>An email address such as <code class="highlighter-rouge">"John.Smith@example.com"</code> is made up of a local part (<code class="highlighter-rouge">"John.Smith"</code>), an <code class="highlighter-rouge">"@"</code> symbol, then a domain part (<code class="highlighter-rouge">"example.com"</code>).</p>

<p>The domain name part of an email address may only consist of letters, digits, hyphens and dots. The local part, however, also allows a lot of different special characters.</p>

<p>Given a valid email address, find its domain part.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">address = "prettyandsimple@example.com"</code>, the output should be <br />
<code class="highlighter-rouge">findEmailDomain(address) = "example.com"</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">address = "fully-qualified-domain@codesignal.com"</code>, the output should be <br />
<code class="highlighter-rouge">findEmailDomain(address) = "codesignal.com"</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string address</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">10 ≤ address.length ≤ 50</code>.</p>
  </li>
  <li>
    <p><strong>[output] string</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def findEmailDomain(address):
    return address.split('@')[-1]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>43. isBeautifulString</title>
	  <link>//43-isBeautifulString</link>
	  <author></author>
	  <pubDate>2020-02-10T11:00:00+09:00</pubDate>
	  <guid>//43-isBeautifulString</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>A string is said to be beautiful if each letter in the <strong>string</strong> appears at most as many times as <strong>the previous letter in the alphabet within the string</strong>; ie: b occurs no more times than a; c occurs no more times than b; etc.</p>

<p>Given a string, check whether it is <em>beautiful</em>.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "bbbaacdafe"</code>, the output should be <code class="highlighter-rouge">isBeautifulString(inputString) = true</code>; <br />
This string contains 3 <code class="highlighter-rouge">a</code>s, 3 <code class="highlighter-rouge">b</code>s, 1 <code class="highlighter-rouge">c</code>, 1 <code class="highlighter-rouge">d</code>, 1 <code class="highlighter-rouge">e</code>, and 1 <code class="highlighter-rouge">f</code> (and 0 of every other letter), so since there aren’t any letters that appear more frequently than the previous letter, this string qualifies as beautiful.</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "aabbb"</code>, the output should be <code class="highlighter-rouge">isBeautifulString(inputString) = false</code>; <br />
Since there are more <code class="highlighter-rouge">b</code>s than <code class="highlighter-rouge">a</code>s, this string is not beautiful.</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "bbc"</code>, the output should be <code class="highlighter-rouge">isBeautifulString(inputString) = false</code>. <br />
Although there are more <code class="highlighter-rouge">b</code>s than <code class="highlighter-rouge">c</code>s, this string is not beautiful because there are no <code class="highlighter-rouge">a</code>s, so therefore there are more <code class="highlighter-rouge">b</code>s than <code class="highlighter-rouge">a</code>s.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string inputString</strong> <br />
A string of lowercase English letters. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ inputString.length ≤ 50</code>.</p>
  </li>
  <li>
    <p><strong>[output] boolean</strong> <br />
Return <code class="highlighter-rouge">true</code> if the string is beautiful, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def isBeautifulString(inputString):
    abcCount = [0 for i in range(26)]
    for letter in inputString:
        abcCount[ord(letter) - 97] += 1
    for i in range(1, len(abcCount)):
        if abcCount[i] &gt; abcCount[i - 1]:
            return False
    return True
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>42. Bishop and Pawn</title>
	  <link>//42-bishopAndPawn</link>
	  <author></author>
	  <pubDate>2020-02-10T10:00:00+09:00</pubDate>
	  <guid>//42-bishopAndPawn</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given the positions of a white <code class="highlighter-rouge">bishop</code> and a black <code class="highlighter-rouge">pawn</code> on the standard chess board, determine whether the bishop can capture the pawn in one move.</p>

<p>The bishop has no restrictions in distance for each move, but is limited to diagonal movement. Check out the example below to see how it can move:
<img src="./img/bishop.jpg" alt="bishop" /></p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">bishop = "a1"</code> and <code class="highlighter-rouge">pawn = "c3"</code>, the output should be <br />
<code class="highlighter-rouge">bishopAndPawn(bishop, pawn) = true</code>.
<img src="./img/bishopex1.jpg" alt="bishopex1" /></p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">bishop = "h1"</code> and <code class="highlighter-rouge">pawn = "h3"</code>, the output should be <br />
<code class="highlighter-rouge">bishopAndPawn(bishop, pawn) = false</code>.
<img src="./img/bishopex2.jpg" alt="bishopex2" /></p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string bishop</strong> <br />
Coordinates of the white bishop in the chess notation. <br />
Guaranteed constraints: <code class="highlighter-rouge">bishop.length = 2</code>, <code class="highlighter-rouge">'a' ≤ bishop[0] ≤ 'h'</code>, <code class="highlighter-rouge">1 ≤ bishop[1] ≤ 8</code>.</p>
  </li>
  <li>
    <p><strong>[input] string pawn</strong> <br />
Coordinates of the black pawn in the same notation. <br />
Guaranteed constraints: <code class="highlighter-rouge">pawn.length = 2</code>, <code class="highlighter-rouge">'a' ≤ pawn[0] ≤ 'h'</code>, <code class="highlighter-rouge">1 ≤ pawn[1] ≤ 8</code>.</p>
  </li>
  <li>
    <p><strong>[output] boolean</strong> <br />
<code class="highlighter-rouge">true</code> if the bishop can capture the pawn, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def bishopAndPawn(bishop, pawn):
    capturePosition = []
    for i in range(-7, 8):
        x = chr(ord(bishop[0]) + i)
        y1 = str(int(bishop[1]) + i)
        y2 = str(int(bishop[1]) - i)
        capturePosition.append(x + y1)
        capturePosition.append(x + y2)
    return pawn in capturePosition
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>41. digitDegree</title>
	  <link>//41-digitDegree</link>
	  <author></author>
	  <pubDate>2020-02-09T17:00:00+09:00</pubDate>
	  <guid>//41-digitDegree</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Let’s define <em>digit degree</em> of some positive integer as the number of times we need to replace this number with the sum of its digits until we get to a one digit number.</p>

<p>Given an integer, find its digit degree.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">n = 5</code>, the output should be <br />
<code class="highlighter-rouge">digitDegree(n) = 0</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">n = 100</code>, the output should be <br />
<code class="highlighter-rouge">digitDegree(n) = 1</code>. <br />
<code class="highlighter-rouge">1 + 0 + 0 = 1</code>.</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">n = 91</code>, the output should be <br />
<code class="highlighter-rouge">digitDegree(n) = 2</code>. <br />
<code class="highlighter-rouge">9 + 1 = 10</code> -&gt; <code class="highlighter-rouge">1 + 0 = 1</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] integer n</strong> <br />
Guaranteed constraints: 5 ≤ n ≤ 10<sup>9</sup>.</p>
  </li>
  <li>
    <p><strong>[output] integer</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def digitDegree(n):
    count = 0
    while len(str(n)) &gt; 1:
        n = sum([int(digit) for digit in str(n)])
        count += 1
    return count
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>40. longestDigitsPrefix</title>
	  <link>//40-longestDigitsPrefix</link>
	  <author></author>
	  <pubDate>2020-02-09T16:00:00+09:00</pubDate>
	  <guid>//40-longestDigitsPrefix</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a string, output its longest <strong>prefix</strong> which contains only digits.</p>

<p>A substring of a string is called a <strong>prefix</strong> if it starts at the string’s first character.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputString = "123aa1"</code>, the output should be <br />
<code class="highlighter-rouge">longestDigitsPrefix(inputString) = "123"</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string inputString</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ inputString.length ≤ 100</code>.</p>
  </li>
  <li>
    <p><strong>[output] string</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def longestDigitsPrefix(inputString):
    if not inputString[0].isdigit():
        return ""
    for i in range(len(inputString)):
        if not inputString[i].isdigit():
            return inputString[:i]
    return inputString
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>39. Knapsack Light</title>
	  <link>//39-knapsackLight</link>
	  <author></author>
	  <pubDate>2020-02-09T15:00:00+09:00</pubDate>
	  <guid>//39-knapsackLight</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>You found two items in a treasure chest! The first item weighs <code class="highlighter-rouge">weight1</code> and is worth <code class="highlighter-rouge">value1</code>, and the second item weighs <code class="highlighter-rouge">weight2</code> and is worth <code class="highlighter-rouge">value2</code>. What is the total maximum value of the items you can take with you, assuming that your max weight capacity is <code class="highlighter-rouge">maxW</code> and you can’t come back for the items later?</p>

<p>Note that there are only two items and you can’t bring more than one item of each type, i.e. you can’t take two first items or two second items.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">value1 = 10</code>, <code class="highlighter-rouge">weight1 = 5</code>, <code class="highlighter-rouge">value2 = 6</code>, <code class="highlighter-rouge">weight2 = 4</code>, and <code class="highlighter-rouge">maxW = 8</code>, the output should be <br />
<code class="highlighter-rouge">knapsackLight(value1, weight1, value2, weight2, maxW) = 10</code>. <br />
You can only carry the first item.</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">value1 = 10</code>, <code class="highlighter-rouge">weight1 = 5</code>, <code class="highlighter-rouge">value2 = 6</code>, <code class="highlighter-rouge">weight2 = 4</code>, and <code class="highlighter-rouge">maxW = 9</code>, the output should be <br />
<code class="highlighter-rouge">knapsackLight(value1, weight1, value2, weight2, maxW) = 16</code>. <br />
You’re strong enough to take both of the items with you.</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">value1 = 5</code>, <code class="highlighter-rouge">weight1 = 3</code>, <code class="highlighter-rouge">value2 = 7</code>, <code class="highlighter-rouge">weight2 = 4</code>, and <code class="highlighter-rouge">maxW = 6</code>, the output should be <br />
<code class="highlighter-rouge">knapsackLight(value1, weight1, value2, weight2, maxW) = 7</code>. <br />
You can’t take both items, but you can take any of them.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] integer value1</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">2 ≤ value1 ≤ 20</code>.</p>
  </li>
  <li>
    <p><strong>[input] integer weight1</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">2 ≤ weight1 ≤ 10</code>.</p>
  </li>
  <li>
    <p><strong>[input] integer value2</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">2 ≤ value2 ≤ 20</code>.</p>
  </li>
  <li>
    <p><strong>[input] integer weight2</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">2 ≤ weight2 ≤ 10</code>.</p>
  </li>
  <li>
    <p><strong>[input] integer maxW</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ maxW ≤ 20</code>.</p>
  </li>
  <li>
    <p><strong>[output] integer</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def knapsackLight(value1, weight1, value2, weight2, maxW):
    if weight1 &gt; maxW:
        if weight2 &gt; maxW:
            return 0
        else:
            return value2
    elif weight2 &gt; maxW:
        return value1
    elif weight1 + weight2 &gt; maxW:
        return max(value1, value2)
    else:
        return value1 + value2
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>38. growingPlant</title>
	  <link>//38-growingPlant</link>
	  <author></author>
	  <pubDate>2020-02-09T14:00:00+09:00</pubDate>
	  <guid>//38-growingPlant</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Caring for a plant can be hard work, but since you tend to it regularly, you have a plant that grows consistently. Each day, its height increases by a fixed amount represented by the integer <code class="highlighter-rouge">upSpeed</code>. But due to lack of sunlight, the plant decreases in height every night, by an amount represented by <code class="highlighter-rouge">downSpeed</code>.</p>

<p>Since you grew the plant from a seed, it started at height <code class="highlighter-rouge">0</code> initially. Given an integer <code class="highlighter-rouge">desiredHeight</code>, your task is to find how many days it’ll take for the plant to reach this height.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">upSpeed = 100</code>, <code class="highlighter-rouge">downSpeed = 10</code>, and <code class="highlighter-rouge">desiredHeight = 910</code>, the output should be <br />
<code class="highlighter-rouge">growingPlant(upSpeed, downSpeed, desiredHeight) = 10</code>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">#</th>
      <th style="text-align: center">Day</th>
      <th style="text-align: center">Night</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">100</td>
      <td style="text-align: center">90</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">190</td>
      <td style="text-align: center">180</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">280</td>
      <td style="text-align: center">270</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">370</td>
      <td style="text-align: center">360</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">460</td>
      <td style="text-align: center">450</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: center">550</td>
      <td style="text-align: center">540</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: center">640</td>
      <td style="text-align: center">630</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: center">730</td>
      <td style="text-align: center">720</td>
    </tr>
    <tr>
      <td style="text-align: center">9</td>
      <td style="text-align: center">820</td>
      <td style="text-align: center">810</td>
    </tr>
    <tr>
      <td style="text-align: center">10</td>
      <td style="text-align: center">910</td>
      <td style="text-align: center">900</td>
    </tr>
  </tbody>
</table>

<p>The plant first reaches a height of <code class="highlighter-rouge">910</code> on day <code class="highlighter-rouge">10</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] integer upSpeed <br />
A positive integer representing the daily growth of the plant. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ upSpeed ≤ 100</code>.</p>
  </li>
  <li>
    <p>[input] integer downSpeed <br />
A positive integer representing the nightly decline of the plant. <br />
Guaranteed constraints: <code class="highlighter-rouge">2 ≤ downSpeed &lt; upSpeed</code>.</p>
  </li>
  <li>
    <p>[input] integer desiredHeight <br />
A positive integer representing the goal height. <br />
Guaranteed constraints: <code class="highlighter-rouge">4 ≤ desiredHeight ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[output] integer <br />
The number of days that it will take for the plant to reach / pass <code class="highlighter-rouge">desiredHeight</code>.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import math

def growingPlant(upSpeed, downSpeed, desiredHeight):
    if desiredHeight &lt; upSpeed:
        return 1
    return math.ceil((desiredHeight - upSpeed) / (upSpeed - downSpeed) + 1)
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>37. arrayMaxConsecutiveSum</title>
	  <link>//37-arrayMaxConsecutiveSum</link>
	  <author></author>
	  <pubDate>2020-02-09T13:00:00+09:00</pubDate>
	  <guid>//37-arrayMaxConsecutiveSum</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given array of integers, find the maximal possible sum of some of its <code class="highlighter-rouge">k</code> consecutive elements.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">inputArray = [2, 3, 5, 1, 6]</code> and <code class="highlighter-rouge">k = 2</code>, the output should be <br />
<code class="highlighter-rouge">arrayMaxConsecutiveSum(inputArray, k) = 8</code>. <br />
All possible sums of <code class="highlighter-rouge">2</code> consecutive elements are:</p>

<ul>
  <li><code class="highlighter-rouge">2 + 3 = 5</code>;</li>
  <li><code class="highlighter-rouge">3 + 5 = 8</code>;</li>
  <li><code class="highlighter-rouge">5 + 1 = 6</code>;</li>
  <li><code class="highlighter-rouge">1 + 6 = 7</code>. <br />
Thus, the answer is <code class="highlighter-rouge">8</code>.</li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] array.integer inputArray <br />
Array of positive integers. <br /><br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ inputArray.length ≤ 105</code>, <code class="highlighter-rouge">1 ≤ inputArray[i] ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[input] integer k <br />
An integer (not greater than the length of <code class="highlighter-rouge">inputArray</code>). <br />
Guaranteed constraints: <code class="highlighter-rouge">1 ≤ k ≤ inputArray.length</code>.</p>
  </li>
  <li>
    <p>[output] integer <br />
The maximal possible sum.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def arrayMaxConsecutiveSum(inputArray, k):
    curSum = sum(inputArray[:k])
    maxSum = curSum
    for i in range(len(inputArray) - k):
        curSum += inputArray[k + i] - inputArray[i]
        if curSum &gt; maxSum:
            maxSum = curSum
    return maxSum
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>36. differentSymbolsNaive</title>
	  <link>//36-differentSymbolsNaive</link>
	  <author></author>
	  <pubDate>2020-02-09T12:00:00+09:00</pubDate>
	  <guid>//36-differentSymbolsNaive</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a string, find the number of different characters in it.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">s = "cabca"</code>, the output should be <br />
<code class="highlighter-rouge">differentSymbolsNaive(s) = 3</code>.</p>

<p>There are <code class="highlighter-rouge">3</code> different characters <code class="highlighter-rouge">a</code>, <code class="highlighter-rouge">b</code> and <code class="highlighter-rouge">c</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>[execution time limit] <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p>[input] string s <br />
A string of lowercase English letters. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ s.length ≤ 1000</code>.</p>
  </li>
  <li>
    <p>[output] integer</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def differentSymbolsNaive(s):
    existChar = []
    count = 0
    for letter in s:
        if letter not in existChar:
            existChar.append(letter)
            count += 1
    return count
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
