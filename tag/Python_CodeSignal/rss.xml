<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>dududoo.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>Since Jan 2020...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>50. chessKnight</title>
	  <link>//50-chessKnight</link>
	  <author></author>
	  <pubDate>2020-02-12T14:00:00+09:00</pubDate>
	  <guid>//50-chessKnight</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a position of a knight on the standard chessboard, find the number of different moves the knight can perform.</p>

<p>The knight can move to a square that is two squares horizontally and one square vertically, or two squares vertically and one square horizontally away from it. The complete move therefore looks like the letter L. Check out the image below to see all valid moves for a knight piece that is placed on one of the central squares.
<img src="./img/knight.jpg" alt="knight" /></p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">cell = "a1"</code>, the output should be <br />
<code class="highlighter-rouge">chessKnight(cell) = 2</code>.
<img src="./img/knight1.jpg" alt="knight1" /></p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">cell = "c2"</code>, the output should be <br />
<code class="highlighter-rouge">chessKnight(cell) = 6</code>.
<img src="./img/knight2.jpg" alt="knight2" /></p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string cell</strong> <br />
String consisting of 2 letters - coordinates of the knight on an 8 × 8 chessboard in chess notation. <br />
Guaranteed constraints: <code class="highlighter-rouge">cell.length = 2</code>, <code class="highlighter-rouge">'a' ≤ cell[0] ≤ 'h'</code>, <code class="highlighter-rouge">1 ≤ cell[1] ≤ 8</code>.</p>
  </li>
  <li>
    <p><strong>[output] integer</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def chessKnight(cell):
    move = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]
    arrive = [chr(ord(cell[0]) + i[0]) + str(int(cell[1]) + i[1]) for i in move]
    valid_x = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
    valid_y = [str(i) for i in range(1, 9)]
    count = 0
    for position in arrive:
        if (position[0] in valid_x) and (position[1:] in valid_y):
            count += 1
    return count
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>49. lineEncoding</title>
	  <link>//49-lineEncoding</link>
	  <author></author>
	  <pubDate>2020-02-12T13:00:00+09:00</pubDate>
	  <guid>//49-lineEncoding</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a string, return its encoding defined as follows:</p>

<ul>
  <li>First, the string is divided into the least possible number of disjoint substrings consisting of identical characters
    <ul>
      <li>for example, <code class="highlighter-rouge">"aabbbc"</code> is divided into <code class="highlighter-rouge">["aa", "bbb", "c"]</code></li>
    </ul>
  </li>
  <li>Next, each substring with length greater than one is replaced with a concatenation of its length and the repeating character
    <ul>
      <li>for example, substring <code class="highlighter-rouge">"bbb"</code> is replaced by <code class="highlighter-rouge">"3b"</code></li>
    </ul>
  </li>
  <li>Finally, all the new strings are concatenated together in the same order and a new string is returned.</li>
</ul>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">s = "aabbbc"</code>, the output should be <br />
<code class="highlighter-rouge">lineEncoding(s) = "2a3bc"</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string s</strong> <br />
String consisting of lowercase English letters.
Guaranteed constraints: <code class="highlighter-rouge">4 ≤ s.length ≤ 15</code>.</p>
  </li>
  <li>
    <p><strong>[output] string</strong> <br />
Encoded version of <code class="highlighter-rouge">s</code>.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def lineEncoding(s):
    s = s + '_'
    encoded = ''
    count = 1
    for i in range(len(s) - 1):
        if s[i] == s[i + 1]:
            count += 1
        else:
            if count == 1:
                encoded += s[i]
            else:
                encoded += str(count) + s[i]
            count = 1
    return encoded
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>48. isDigit</title>
	  <link>//48-isDigit</link>
	  <author></author>
	  <pubDate>2020-02-12T12:00:00+09:00</pubDate>
	  <guid>//48-isDigit</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Determine if the given character is a digit or not.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">symbol = '0'</code>, the output should be <br />
<code class="highlighter-rouge">isDigit(symbol) = true</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">symbol = '-'</code>, the output should be <br />
<code class="highlighter-rouge">isDigit(symbol) = false</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] char symbol</strong> <br />
A character which is either a digit or not.</p>
  </li>
  <li>
    <p><strong>[output] boolean</strong> <br />
<code class="highlighter-rouge">true</code> if <code class="highlighter-rouge">symbol</code> is a digit, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def isDigit(symbol):
    return symbol.isdigit()
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>47. Is MAC48 Address?</title>
	  <link>//47-isMAC48Address</link>
	  <author></author>
	  <pubDate>2020-02-12T11:00:00+09:00</pubDate>
	  <guid>//47-isMAC48Address</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>A media access control address (MAC address) is a unique identifier assigned to network interfaces for communications on the physical network segment.</p>

<p>The standard (IEEE 802) format for printing MAC-48 addresses in human-friendly form is six groups of two hexadecimal digits (0 to 9 or A to F), separated by hyphens (e.g. <code class="highlighter-rouge">01-23-45-67-89-AB</code>).</p>

<p>Your task is to check by given string <code class="highlighter-rouge">inputString</code> whether it corresponds to MAC-48 address or not.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "00-1B-63-84-45-E6"</code>, the output should be <br />
<code class="highlighter-rouge">isMAC48Address(inputString) = true</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "Z1-1B-63-84-45-E6"</code>, the output should be <br />
<code class="highlighter-rouge">isMAC48Address(inputString) = false</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "not a MAC-48 address"</code>, the output should be <br />
<code class="highlighter-rouge">isMAC48Address(inputString) = false</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string inputString</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">15 ≤ inputString.length ≤ 20</code>.</p>
  </li>
  <li>
    <p><strong>[output] boolean</strong> <br />
<code class="highlighter-rouge">true</code> if <code class="highlighter-rouge">inputString</code> corresponds to MAC-48 address naming rules, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def isMAC48Address(inputString):
    inputS = inputString.split('-')
    valid = [str(i) for i in range(10)] + ['A', 'B', 'C', 'D', 'E', 'F']
    if len(inputS) == 6:
        for element in inputS:
            if len(element) == 2 and (element[0] in valid) and (element[1] in valid):
                continue
            else:
                return False
        return True
    return False
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>46. Elections Winners</title>
	  <link>//46-electionsWinners</link>
	  <author></author>
	  <pubDate>2020-02-12T10:00:00+09:00</pubDate>
	  <guid>//46-electionsWinners</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Elections are in progress!</p>

<p>Given an array of the numbers of votes given to each of the candidates so far, and an integer <code class="highlighter-rouge">k</code> equal to the number of voters who haven’t cast their vote yet, find the number of candidates who still have a chance to win the election.</p>

<p>The winner of the election must secure strictly more votes than any other candidate. If two or more candidates receive the same (maximum) number of votes, assume there is no winner at all.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">votes = [2, 3, 5, 2]</code> and <code class="highlighter-rouge">k = 3</code>, the output should be <br />
<code class="highlighter-rouge">electionsWinners(votes, k) = 2</code>.</p>

<ul>
  <li>
    <p>The first candidate got 2 votes. Even if all of the remaining 3 candidates vote for him, he will still have only 5 votes, i.e. the same number as the third candidate, so there will be no winner.</p>
  </li>
  <li>
    <p>The second candidate can win if all the remaining candidates vote for him (<code class="highlighter-rouge">3 + 3 = 6 &gt; 5</code>).</p>
  </li>
  <li>
    <p>The third candidate can win even if none of the remaining candidates vote for him. For example, if each of the remaining voters cast their votes for each of his opponents, he will still be the winner (the <code class="highlighter-rouge">votes</code> array will thus be <code class="highlighter-rouge">[3, 4, 5, 3]</code>).</p>
  </li>
  <li>
    <p>The last candidate can’t win no matter what (for the same reason as the first candidate).</p>
  </li>
</ul>

<p>Thus, only 2 candidates can win (the second and the third), which is the answer.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] array.integer votes</strong> <br />
A non-empty array of non-negative integers. Its i<sup>th</sup> element denotes the number of votes cast for the i<sup>th</sup> candidate. <br />
Guaranteed constraints: 4 ≤ votes.length ≤ 10<sup>5</sup>, 0 ≤ votes[i] ≤ 10<sup>4</sup>.</p>
  </li>
  <li>
    <p><strong>[input] integer k</strong>
The number of voters who haven’t cast their vote yet. <br />
Guaranteed constraints: 0 ≤ k ≤ 10<sup>5</sup></p>
  </li>
  <li>
    <p><strong>[output] integer</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def electionsWinners(votes, k):
    maxVote = max(votes)
    count = 0
    if k == 0:
        if votes.count(maxVote) &gt; 1:
            return 0
        else:
            return 1
    for vote in votes:
        if maxVote - vote &lt; k:
            count += 1
    return count
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>45. buildPalindrome</title>
	  <link>//45-buildPalindrome</link>
	  <author></author>
	  <pubDate>2020-02-10T13:00:00+09:00</pubDate>
	  <guid>//45-buildPalindrome</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given a string, find the shortest possible string which can be achieved by adding characters to the end of initial string to make it a palindrome.</p>

<h3 id="example">Example</h3>

<p>For <code class="highlighter-rouge">st = "abcdc"</code>, the output should be <br />
<code class="highlighter-rouge">buildPalindrome(st) = "abcdcba"</code>.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string st</strong> <br />
A string consisting of lowercase English letters. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ st.length ≤ 10</code>.</p>
  </li>
  <li>
    <p><strong>[output] string</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def buildPalindrome(st):
    maxIndex = -1
    for i in range(2, len(st) + 1):
        if st[-i:] == st[:-i - 1:-1]:
            maxIndex = -i
    return st + st[:maxIndex][::-1]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>44. Find Email Domain</title>
	  <link>//44-findEmailDomain</link>
	  <author></author>
	  <pubDate>2020-02-10T12:00:00+09:00</pubDate>
	  <guid>//44-findEmailDomain</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>An email address such as <code class="highlighter-rouge">"John.Smith@example.com"</code> is made up of a local part (<code class="highlighter-rouge">"John.Smith"</code>), an <code class="highlighter-rouge">"@"</code> symbol, then a domain part (<code class="highlighter-rouge">"example.com"</code>).</p>

<p>The domain name part of an email address may only consist of letters, digits, hyphens and dots. The local part, however, also allows a lot of different special characters.</p>

<p>Given a valid email address, find its domain part.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">address = "prettyandsimple@example.com"</code>, the output should be <br />
<code class="highlighter-rouge">findEmailDomain(address) = "example.com"</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">address = "fully-qualified-domain@codesignal.com"</code>, the output should be <br />
<code class="highlighter-rouge">findEmailDomain(address) = "codesignal.com"</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string address</strong> <br />
Guaranteed constraints: <code class="highlighter-rouge">10 ≤ address.length ≤ 50</code>.</p>
  </li>
  <li>
    <p><strong>[output] string</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def findEmailDomain(address):
    return address.split('@')[-1]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>43. isBeautifulString</title>
	  <link>//43-isBeautifulString</link>
	  <author></author>
	  <pubDate>2020-02-10T11:00:00+09:00</pubDate>
	  <guid>//43-isBeautifulString</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>A string is said to be beautiful if each letter in the <strong>string</strong> appears at most as many times as <strong>the previous letter in the alphabet within the string</strong>; ie: b occurs no more times than a; c occurs no more times than b; etc.</p>

<p>Given a string, check whether it is <em>beautiful</em>.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "bbbaacdafe"</code>, the output should be <code class="highlighter-rouge">isBeautifulString(inputString) = true</code>; <br />
This string contains 3 <code class="highlighter-rouge">a</code>s, 3 <code class="highlighter-rouge">b</code>s, 1 <code class="highlighter-rouge">c</code>, 1 <code class="highlighter-rouge">d</code>, 1 <code class="highlighter-rouge">e</code>, and 1 <code class="highlighter-rouge">f</code> (and 0 of every other letter), so since there aren’t any letters that appear more frequently than the previous letter, this string qualifies as beautiful.</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "aabbb"</code>, the output should be <code class="highlighter-rouge">isBeautifulString(inputString) = false</code>; <br />
Since there are more <code class="highlighter-rouge">b</code>s than <code class="highlighter-rouge">a</code>s, this string is not beautiful.</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">inputString = "bbc"</code>, the output should be <code class="highlighter-rouge">isBeautifulString(inputString) = false</code>. <br />
Although there are more <code class="highlighter-rouge">b</code>s than <code class="highlighter-rouge">c</code>s, this string is not beautiful because there are no <code class="highlighter-rouge">a</code>s, so therefore there are more <code class="highlighter-rouge">b</code>s than <code class="highlighter-rouge">a</code>s.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string inputString</strong> <br />
A string of lowercase English letters. <br />
Guaranteed constraints: <code class="highlighter-rouge">3 ≤ inputString.length ≤ 50</code>.</p>
  </li>
  <li>
    <p><strong>[output] boolean</strong> <br />
Return <code class="highlighter-rouge">true</code> if the string is beautiful, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def isBeautifulString(inputString):
    abcCount = [0 for i in range(26)]
    for letter in inputString:
        abcCount[ord(letter) - 97] += 1
    for i in range(1, len(abcCount)):
        if abcCount[i] &gt; abcCount[i - 1]:
            return False
    return True
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>42. Bishop and Pawn</title>
	  <link>//42-bishopAndPawn</link>
	  <author></author>
	  <pubDate>2020-02-10T10:00:00+09:00</pubDate>
	  <guid>//42-bishopAndPawn</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Given the positions of a white <code class="highlighter-rouge">bishop</code> and a black <code class="highlighter-rouge">pawn</code> on the standard chess board, determine whether the bishop can capture the pawn in one move.</p>

<p>The bishop has no restrictions in distance for each move, but is limited to diagonal movement. Check out the example below to see how it can move:
<img src="./img/bishop.jpg" alt="bishop" /></p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">bishop = "a1"</code> and <code class="highlighter-rouge">pawn = "c3"</code>, the output should be <br />
<code class="highlighter-rouge">bishopAndPawn(bishop, pawn) = true</code>.
<img src="./img/bishopex1.jpg" alt="bishopex1" /></p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">bishop = "h1"</code> and <code class="highlighter-rouge">pawn = "h3"</code>, the output should be <br />
<code class="highlighter-rouge">bishopAndPawn(bishop, pawn) = false</code>.
<img src="./img/bishopex2.jpg" alt="bishopex2" /></p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] string bishop</strong> <br />
Coordinates of the white bishop in the chess notation. <br />
Guaranteed constraints: <code class="highlighter-rouge">bishop.length = 2</code>, <code class="highlighter-rouge">'a' ≤ bishop[0] ≤ 'h'</code>, <code class="highlighter-rouge">1 ≤ bishop[1] ≤ 8</code>.</p>
  </li>
  <li>
    <p><strong>[input] string pawn</strong> <br />
Coordinates of the black pawn in the same notation. <br />
Guaranteed constraints: <code class="highlighter-rouge">pawn.length = 2</code>, <code class="highlighter-rouge">'a' ≤ pawn[0] ≤ 'h'</code>, <code class="highlighter-rouge">1 ≤ pawn[1] ≤ 8</code>.</p>
  </li>
  <li>
    <p><strong>[output] boolean</strong> <br />
<code class="highlighter-rouge">true</code> if the bishop can capture the pawn, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def bishopAndPawn(bishop, pawn):
    capturePosition = []
    for i in range(-7, 8):
        x = chr(ord(bishop[0]) + i)
        y1 = str(int(bishop[1]) + i)
        y2 = str(int(bishop[1]) - i)
        capturePosition.append(x + y1)
        capturePosition.append(x + y2)
    return pawn in capturePosition
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>41. digitDegree</title>
	  <link>//41-digitDegree</link>
	  <author></author>
	  <pubDate>2020-02-09T17:00:00+09:00</pubDate>
	  <guid>//41-digitDegree</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>Let’s define <em>digit degree</em> of some positive integer as the number of times we need to replace this number with the sum of its digits until we get to a one digit number.</p>

<p>Given an integer, find its digit degree.</p>

<h3 id="example">Example</h3>

<ul>
  <li>
    <p>For <code class="highlighter-rouge">n = 5</code>, the output should be <br />
<code class="highlighter-rouge">digitDegree(n) = 0</code>;</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">n = 100</code>, the output should be <br />
<code class="highlighter-rouge">digitDegree(n) = 1</code>. <br />
<code class="highlighter-rouge">1 + 0 + 0 = 1</code>.</p>
  </li>
  <li>
    <p>For <code class="highlighter-rouge">n = 91</code>, the output should be <br />
<code class="highlighter-rouge">digitDegree(n) = 2</code>. <br />
<code class="highlighter-rouge">9 + 1 = 10</code> -&gt; <code class="highlighter-rouge">1 + 0 = 1</code>.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p><strong>[execution time limit]</strong> <br />
4 seconds (py3)</p>
  </li>
  <li>
    <p><strong>[input] integer n</strong> <br />
Guaranteed constraints: 5 ≤ n ≤ 10<sup>9</sup>.</p>
  </li>
  <li>
    <p><strong>[output] integer</strong></p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def digitDegree(n):
    count = 0
    while len(str(n)) &gt; 1:
        n = sum([int(digit) for digit in str(n)])
        count += 1
    return count
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
