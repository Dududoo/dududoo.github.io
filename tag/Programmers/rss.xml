<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>dududoo.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>Since Jan 2020...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Hash - 4. 베스트앨범</title>
	  <link>//Hash4</link>
	  <author></author>
	  <pubDate>2020-02-19T13:00:00+09:00</pubDate>
	  <guid>//Hash4</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>스트리밍 사이트에서 장르 별로 가장 많이 재생된 노래를 두 개씩 모아 베스트 앨범을 출시하려 합니다. 노래는 고유 번호로 구분하며, 노래를 수록하는 기준은 다음과 같습니다.</p>

<ol>
  <li>속한 노래가 많이 재생된 장르를 먼저 수록합니다.</li>
  <li>장르 내에서 많이 재생된 노래를 먼저 수록합니다.</li>
  <li>장르 내에서 재생 횟수가 같은 노래 중에서는 고유 번호가 낮은 노래를 먼저 수록합니다.</li>
</ol>

<p>노래의 장르를 나타내는 문자열 배열 genres와 노래별 재생 횟수를 나타내는 정수 배열 plays가 주어질 때, 베스트 앨범에 들어갈 노래의 고유 번호를 순서대로 return 하도록 solution 함수를 완성하세요.</p>

<h3 id="example">Example</h3>

<table>
  <thead>
    <tr>
      <th>genres</th>
      <th>plays</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[“classic”, “pop”, “classic”, “classic”, “pop”]</td>
      <td>[500, 600, 150, 800, 2500]</td>
      <td>[4, 1, 3, 0]</td>
    </tr>
  </tbody>
</table>

<p>classic 장르는 1,450회 재생되었으며, classic 노래는 다음과 같습니다.</p>

<ul>
  <li>고유 번호 3: 800회 재생</li>
  <li>고유 번호 0: 500회 재생</li>
  <li>고유 번호 2: 150회 재생</li>
</ul>

<p>pop 장르는 3,100회 재생되었으며, pop 노래는 다음과 같습니다.</p>

<ul>
  <li>고유 번호 4: 2,500회 재생</li>
  <li>고유 번호 1: 600회 재생</li>
</ul>

<p>따라서 pop 장르의 [4, 1]번 노래를 먼저, classic 장르의 [3, 0]번 노래를 그다음에 수록합니다.</p>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>genres[i]는 고유번호가 i인 노래의 장르입니다.</p>
  </li>
  <li>
    <p>plays[i]는 고유번호가 i인 노래가 재생된 횟수입니다.</p>
  </li>
  <li>
    <p>genres와 plays의 길이는 같으며, 이는 1 이상 10,000 이하입니다.</p>
  </li>
  <li>
    <p>장르 종류는 100개 미만입니다.</p>
  </li>
  <li>
    <p>장르에 속한 곡이 하나라면, 하나의 곡만 선택합니다.</p>
  </li>
  <li>
    <p>모든 장르는 재생된 횟수가 다릅니다.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def pickMost(genres, plays, genre):    # 장르 내에서 가장 많이 재생된 곡의 고유번호 리턴
    mostPlay = -1
    for i in range(len(genres)):
        if genres[i] == genre:
            if plays[i] &gt; mostPlay:
                mostPlay = plays[i]
                mostPlay_i = i
    return mostPlay_i

def solution(genres, plays):
    genreCount = {}
    for i in range(len(genres)):
        if genres[i] in genreCount:
            genreCount[genres[i]] += plays[i]
        else:
            genreCount[genres[i]] = plays[i]
    answer = []
    while len(genreCount) &gt; 0:
        mostGenre = max(genreCount.keys(), key = lambda genre: genreCount[genre])
        answer.append(pickMost(genres, plays, mostGenre))
        if genres.count(mostGenre) &gt; 1:    # 장르에 속한 곡이 하나인 경우 제외
            plays[answer[-1]] = -1
            answer.append(pickMost(genres, plays, mostGenre))
        del genreCount[mostGenre]        
    return answer
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>Hash - 3. 위장</title>
	  <link>//Hash3</link>
	  <author></author>
	  <pubDate>2020-02-19T12:00:00+09:00</pubDate>
	  <guid>//Hash3</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다.</p>

<p>예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다.</p>

<table>
  <thead>
    <tr>
      <th>종류</th>
      <th>이름</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>얼굴</td>
      <td>동그란 안경, 검정 선글라스</td>
    </tr>
    <tr>
      <td>상의</td>
      <td>파란색 티셔츠</td>
    </tr>
    <tr>
      <td>하의</td>
      <td>청바지</td>
    </tr>
    <tr>
      <td>겉옷</td>
      <td>긴 코트</td>
    </tr>
  </tbody>
</table>

<p>스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.</p>

<h3 id="example">Example</h3>

<table>
  <thead>
    <tr>
      <th>clothes</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[[“yellow_hat”, “headgear”], [“blue_sunglasses”, “eyewear”], [“green_turban”, “headgear”]]</td>
      <td>5</td>
    </tr>
    <tr>
      <td>[[“crow_mask”, “face”], [“blue_sunglasses”, “face”], [“smoky_makeup”, “face”]]</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>예제 1 <br />
headgear에 해당하는 의상이 yellow_hat, green_turban이고 eyewear에 해당하는 의상이 blue_sunglasses이므로 아래와 같이 5개의 조합이 가능합니다.</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. yellow_hat
2. blue_sunglasses
3. green_turban
4. yellow_hat + blue_sunglasses
5. green_turban + blue_sunglasses
</code></pre></div>    </div>
  </li>
  <li>
    <p>예제 2 <br />
face에 해당하는 의상이 crow_mask, blue_sunglasses, smoky_makeup이므로 아래와 같이 3개의 조합이 가능합니다.</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. crow_mask
2. blue_sunglasses
3. smoky_makeup
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>clothes의 각 행은 [의상의 이름, 의상의 종류]로 이루어져 있습니다.</p>
  </li>
  <li>
    <p>스파이가 가진 의상의 수는 1개 이상 30개 이하입니다.</p>
  </li>
  <li>
    <p>같은 이름을 가진 의상은 존재하지 않습니다.</p>
  </li>
  <li>
    <p>clothes의 모든 원소는 문자열로 이루어져 있습니다.</p>
  </li>
  <li>
    <p>모든 문자열의 길이는 1 이상 20 이하인 자연수이고 알파벳 소문자 또는 <code class="highlighter-rouge">_</code> 로만 이루어져 있습니다.</p>
  </li>
  <li>
    <p>스파이는 하루에 최소 한 개의 의상은 입습니다.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def solution(clothes):
    types = {}
    for row in clothes:
        if row[-1] in types:
            types[row[-1]] += 1
        else:
            types[row[-1]] = 1
    combination = 1
    for count in types.values():
        combination *= (count + 1)
    return combination - 1
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>Hash - 2. 전화번호 목록</title>
	  <link>//Hash2</link>
	  <author></author>
	  <pubDate>2020-02-19T11:00:00+09:00</pubDate>
	  <guid>//Hash2</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다. <br />
전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.</p>

<ul>
  <li>구조대 : 119</li>
  <li>박준영 : 97 674 223</li>
  <li>지영석 : 11 9552 4421</li>
</ul>

<p>전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.</p>

<h3 id="example">Example</h3>

<table>
  <thead>
    <tr>
      <th>phone_book</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[“119”, “97674223”, “1195524421”]</td>
      <td>false</td>
    </tr>
    <tr>
      <td>[“123”, “456”, “789”]</td>
      <td>true</td>
    </tr>
    <tr>
      <td>[“12”, “123”, “1235”, “567”, “88”]</td>
      <td>false</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>예제 1 <br />
앞에서 설명한 예와 같습니다.</p>
  </li>
  <li>
    <p>예제 2 <br />
한 번호가 다른 번호의 접두사인 경우가 없으므로, 답은 true입니다.</p>
  </li>
  <li>
    <p>예제 3 <br />
첫 번째 전화번호, “12”가 두 번째 전화번호 “123”의 접두사입니다. 따라서 답은 false입니다.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>phone_book의 길이는 1 이상 1,000,000 이하입니다.</p>
  </li>
  <li>
    <p>각 전화번호의 길이는 1 이상 20 이하입니다.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def solution(phone_book):
    phone_book.sort()
    for i in range(len(phone_book) - 1):
        if phone_book[i + 1][:len(phone_book[i])] == phone_book[i]:
            return False
    return True
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>Hash - 1. 완주하지 못한 선수</title>
	  <link>//Hash1</link>
	  <author></author>
	  <pubDate>2020-02-19T10:00:00+09:00</pubDate>
	  <guid>//Hash1</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="task">Task</h3>

<p>수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.</p>

<p>마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.</p>

<h3 id="example">Example</h3>

<table>
  <thead>
    <tr>
      <th>participant</th>
      <th>completion</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[leo, kiki, eden]</td>
      <td>[eden, kiki]</td>
      <td>“leo”</td>
    </tr>
    <tr>
      <td>[marina, josipa, nikola, vinko, filipa]</td>
      <td>[josipa, filipa, marina, nikola]</td>
      <td>“vinko”</td>
    </tr>
    <tr>
      <td>[mislav, stanko, mislav, ana]</td>
      <td>[stanko, ana, mislav]</td>
      <td>“mislav”</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>예제 1 <br />
“leo”는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.</p>
  </li>
  <li>
    <p>예제 2 <br />
“vinko”는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.</p>
  </li>
  <li>
    <p>예제 3 <br />
“mislav”는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.</p>
  </li>
</ul>

<h3 id="inputoutput">Input/Output</h3>

<ul>
  <li>
    <p>마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.</p>
  </li>
  <li>
    <p>completion의 길이는 participant의 길이보다 1 작습니다.</p>
  </li>
  <li>
    <p>참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.</p>
  </li>
  <li>
    <p>참가자 중에는 동명이인이 있을 수 있습니다.</p>
  </li>
</ul>

<h3 id="my-solution">My Solution</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def solution(participant, completion):
    participant.sort()
    completion.sort()
    for i in range(len(completion)):
        if participant[i] != completion[i]:
            return participant[i]
    return participant[-1]
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
